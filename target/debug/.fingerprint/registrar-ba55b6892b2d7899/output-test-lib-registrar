{"message":"unresolved import `cosmwasm_std::Pair`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":208,"byte_end":212,"line_start":4,"line_end":4,"column_start":68,"column_end":72,"is_primary":true,"text":[{"text":"use cosmwasm_std::{to_binary, Binary, BlockInfo, Deps, Env, Order, Pair, StdError, StdResult};","highlight_start":68,"highlight_end":72}],"label":"no `Pair` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `cosmwasm_std::Pair`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:4:68\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse cosmwasm_std::{to_binary, Binary, BlockInfo, Deps, Env, Order, Pair, StdError, StdResult};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `Pair` in the root\u001b[0m\n\n"}
{"message":"method `transfer_nft` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":6369,"byte_end":6376,"line_start":199,"line_end":199,"column_start":15,"column_end":22,"is_primary":true,"text":[{"text":"        deps: DepsMut,","highlight_start":15,"highlight_end":22}],"label":"expected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(&state::Cw721Contract<'a, T, C>, cosmwasm_std::deps::DepsMut<'_>, cosmwasm_std::types::Env, cosmwasm_std::types::MessageInfo, std::string::String, std::string::String) -> Result<cosmwasm_std::results::response::Response<C>, _>`\n   found fn pointer `fn(&state::Cw721Contract<'a, T, C>, DepsMut<'_>, Env, MessageInfo, std::string::String, std::string::String) -> Result<Response<C>, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":6369,"byte_end":6376,"line_start":199,"line_end":199,"column_start":15,"column_end":22,"is_primary":true,"text":[{"text":"        deps: DepsMut,","highlight_start":15,"highlight_end":22}],"label":null,"suggested_replacement":"cosmwasm_std::deps::DepsMut<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `transfer_nft` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:199:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        deps: DepsMut,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: change the parameter type to match the trait: `cosmwasm_std::deps::DepsMut<'_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::DepsMut<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::types::Env\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::types::MessageInfo\u001b[0m\u001b[0m, std::string::String, std::string::String) -> Result<\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::results::response::Response<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\u001b[0m               found fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mDepsMut<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mEnv\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mMessageInfo\u001b[0m\u001b[0m, std::string::String, std::string::String) -> Result<\u001b[0m\u001b[0m\u001b[1mResponse<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\n"}
{"message":"method `send_nft` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":6878,"byte_end":6885,"line_start":216,"line_end":216,"column_start":15,"column_end":22,"is_primary":true,"text":[{"text":"        deps: DepsMut,","highlight_start":15,"highlight_end":22}],"label":"expected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(&state::Cw721Contract<'a, T, C>, cosmwasm_std::deps::DepsMut<'_>, cosmwasm_std::types::Env, cosmwasm_std::types::MessageInfo, std::string::String, std::string::String, cosmwasm_std::binary::Binary) -> Result<cosmwasm_std::results::response::Response<C>, _>`\n   found fn pointer `fn(&state::Cw721Contract<'a, T, C>, DepsMut<'_>, Env, MessageInfo, std::string::String, std::string::String, cosmwasm_std::Binary) -> Result<Response<C>, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":6878,"byte_end":6885,"line_start":216,"line_end":216,"column_start":15,"column_end":22,"is_primary":true,"text":[{"text":"        deps: DepsMut,","highlight_start":15,"highlight_end":22}],"label":null,"suggested_replacement":"cosmwasm_std::deps::DepsMut<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `send_nft` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:216:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        deps: DepsMut,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: change the parameter type to match the trait: `cosmwasm_std::deps::DepsMut<'_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::DepsMut<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::types::Env\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::types::MessageInfo\u001b[0m\u001b[0m, std::string::String, std::string::String, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1mbinary::Binary\u001b[0m\u001b[0m) -> Result<\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::results::response::Response<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\u001b[0m               found fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mDepsMut<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mEnv\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mMessageInfo\u001b[0m\u001b[0m, std::string::String, std::string::String, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1mBinary\u001b[0m\u001b[0m) -> Result<\u001b[0m\u001b[0m\u001b[1mResponse<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\n"}
{"message":"method `approve` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":7667,"byte_end":7674,"line_start":243,"line_end":243,"column_start":15,"column_end":22,"is_primary":true,"text":[{"text":"        deps: DepsMut,","highlight_start":15,"highlight_end":22}],"label":"expected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(&state::Cw721Contract<'a, T, C>, cosmwasm_std::deps::DepsMut<'_>, cosmwasm_std::types::Env, cosmwasm_std::types::MessageInfo, std::string::String, std::string::String, std::option::Option<_>) -> Result<cosmwasm_std::results::response::Response<C>, _>`\n   found fn pointer `fn(&state::Cw721Contract<'a, T, C>, DepsMut<'_>, Env, MessageInfo, std::string::String, std::string::String, std::option::Option<_>) -> Result<Response<C>, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":7667,"byte_end":7674,"line_start":243,"line_end":243,"column_start":15,"column_end":22,"is_primary":true,"text":[{"text":"        deps: DepsMut,","highlight_start":15,"highlight_end":22}],"label":null,"suggested_replacement":"cosmwasm_std::deps::DepsMut<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `approve` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:243:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        deps: DepsMut,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: change the parameter type to match the trait: `cosmwasm_std::deps::DepsMut<'_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::DepsMut<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::types::Env\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::types::MessageInfo\u001b[0m\u001b[0m, std::string::String, std::string::String, std::option::Option<_>) -> Result<\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::results::response::Response<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\u001b[0m               found fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mDepsMut<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mEnv\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mMessageInfo\u001b[0m\u001b[0m, std::string::String, std::string::String, std::option::Option<_>) -> Result<\u001b[0m\u001b[0m\u001b[1mResponse<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\n"}
{"message":"method `revoke` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":8217,"byte_end":8224,"line_start":261,"line_end":261,"column_start":15,"column_end":22,"is_primary":true,"text":[{"text":"        deps: DepsMut,","highlight_start":15,"highlight_end":22}],"label":"expected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(&state::Cw721Contract<'a, T, C>, cosmwasm_std::deps::DepsMut<'_>, cosmwasm_std::types::Env, cosmwasm_std::types::MessageInfo, std::string::String, std::string::String) -> Result<cosmwasm_std::results::response::Response<C>, _>`\n   found fn pointer `fn(&state::Cw721Contract<'a, T, C>, DepsMut<'_>, Env, MessageInfo, std::string::String, std::string::String) -> Result<Response<C>, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":8217,"byte_end":8224,"line_start":261,"line_end":261,"column_start":15,"column_end":22,"is_primary":true,"text":[{"text":"        deps: DepsMut,","highlight_start":15,"highlight_end":22}],"label":null,"suggested_replacement":"cosmwasm_std::deps::DepsMut<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `revoke` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:261:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        deps: DepsMut,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: change the parameter type to match the trait: `cosmwasm_std::deps::DepsMut<'_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::DepsMut<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::types::Env\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::types::MessageInfo\u001b[0m\u001b[0m, std::string::String, std::string::String) -> Result<\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::results::response::Response<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\u001b[0m               found fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mDepsMut<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mEnv\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mMessageInfo\u001b[0m\u001b[0m, std::string::String, std::string::String) -> Result<\u001b[0m\u001b[0m\u001b[1mResponse<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\n"}
{"message":"method `approve_all` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":8732,"byte_end":8739,"line_start":278,"line_end":278,"column_start":15,"column_end":22,"is_primary":true,"text":[{"text":"        deps: DepsMut,","highlight_start":15,"highlight_end":22}],"label":"expected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(&state::Cw721Contract<'a, T, C>, cosmwasm_std::deps::DepsMut<'_>, cosmwasm_std::types::Env, cosmwasm_std::types::MessageInfo, std::string::String, std::option::Option<_>) -> Result<cosmwasm_std::results::response::Response<C>, _>`\n   found fn pointer `fn(&state::Cw721Contract<'a, T, C>, DepsMut<'_>, Env, MessageInfo, std::string::String, std::option::Option<_>) -> Result<Response<C>, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":8732,"byte_end":8739,"line_start":278,"line_end":278,"column_start":15,"column_end":22,"is_primary":true,"text":[{"text":"        deps: DepsMut,","highlight_start":15,"highlight_end":22}],"label":null,"suggested_replacement":"cosmwasm_std::deps::DepsMut<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `approve_all` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:278:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        deps: DepsMut,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: change the parameter type to match the trait: `cosmwasm_std::deps::DepsMut<'_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::DepsMut<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::types::Env\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::types::MessageInfo\u001b[0m\u001b[0m, std::string::String, std::option::Option<_>) -> Result<\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::results::response::Response<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\u001b[0m               found fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mDepsMut<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mEnv\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mMessageInfo\u001b[0m\u001b[0m, std::string::String, std::option::Option<_>) -> Result<\u001b[0m\u001b[0m\u001b[1mResponse<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\n"}
{"message":"method `revoke_all` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":9527,"byte_end":9534,"line_start":303,"line_end":303,"column_start":15,"column_end":22,"is_primary":true,"text":[{"text":"        deps: DepsMut,","highlight_start":15,"highlight_end":22}],"label":"expected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(&state::Cw721Contract<'a, T, C>, cosmwasm_std::deps::DepsMut<'_>, cosmwasm_std::types::Env, cosmwasm_std::types::MessageInfo, std::string::String) -> Result<cosmwasm_std::results::response::Response<C>, _>`\n   found fn pointer `fn(&state::Cw721Contract<'a, T, C>, DepsMut<'_>, Env, MessageInfo, std::string::String) -> Result<Response<C>, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":9527,"byte_end":9534,"line_start":303,"line_end":303,"column_start":15,"column_end":22,"is_primary":true,"text":[{"text":"        deps: DepsMut,","highlight_start":15,"highlight_end":22}],"label":null,"suggested_replacement":"cosmwasm_std::deps::DepsMut<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `revoke_all` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:303:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m303\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        deps: DepsMut,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: change the parameter type to match the trait: `cosmwasm_std::deps::DepsMut<'_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::DepsMut<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::types::Env\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::types::MessageInfo\u001b[0m\u001b[0m, std::string::String) -> Result<\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::results::response::Response<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\u001b[0m               found fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mDepsMut<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mEnv\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mMessageInfo\u001b[0m\u001b[0m, std::string::String) -> Result<\u001b[0m\u001b[0m\u001b[1mResponse<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\n"}
{"message":"method `contract_info` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":958,"byte_end":962,"line_start":27,"line_end":27,"column_start":35,"column_end":39,"is_primary":true,"text":[{"text":"    fn contract_info(&self, deps: Deps) -> StdResult<ContractInfoResponse> {","highlight_start":35,"highlight_end":39}],"label":"expected struct `cosmwasm_std::deps::Deps`, found struct `Deps`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(&state::Cw721Contract<'a, T, C>, cosmwasm_std::deps::Deps<'_>) -> Result<_, cosmwasm_std::errors::std_error::StdError>`\n   found fn pointer `fn(&state::Cw721Contract<'a, T, C>, Deps<'_>) -> Result<_, cosmwasm_std::StdError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":958,"byte_end":962,"line_start":27,"line_end":27,"column_start":35,"column_end":39,"is_primary":true,"text":[{"text":"    fn contract_info(&self, deps: Deps) -> StdResult<ContractInfoResponse> {","highlight_start":35,"highlight_end":39}],"label":null,"suggested_replacement":"cosmwasm_std::deps::Deps<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `contract_info` has an incompatible type for trait\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:27:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn contract_info(&self, deps: Deps) -> StdResult<ContractInfoResponse> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::Deps`, found struct `Deps`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: change the parameter type to match the trait: `cosmwasm_std::deps::Deps<'_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::Deps<'_>\u001b[0m\u001b[0m) -> Result<_, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1merrors::std_error::StdError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m              found fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mDeps<'_>\u001b[0m\u001b[0m) -> Result<_, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1mStdError\u001b[0m\u001b[0m>`\u001b[0m\n\n"}
{"message":"method `num_tokens` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":1085,"byte_end":1089,"line_start":31,"line_end":31,"column_start":32,"column_end":36,"is_primary":true,"text":[{"text":"    fn num_tokens(&self, deps: Deps) -> StdResult<NumTokensResponse> {","highlight_start":32,"highlight_end":36}],"label":"expected struct `cosmwasm_std::deps::Deps`, found struct `Deps`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(&state::Cw721Contract<'a, T, C>, cosmwasm_std::deps::Deps<'_>) -> Result<_, cosmwasm_std::errors::std_error::StdError>`\n   found fn pointer `fn(&state::Cw721Contract<'a, T, C>, Deps<'_>) -> Result<_, cosmwasm_std::StdError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":1085,"byte_end":1089,"line_start":31,"line_end":31,"column_start":32,"column_end":36,"is_primary":true,"text":[{"text":"    fn num_tokens(&self, deps: Deps) -> StdResult<NumTokensResponse> {","highlight_start":32,"highlight_end":36}],"label":null,"suggested_replacement":"cosmwasm_std::deps::Deps<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `num_tokens` has an incompatible type for trait\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:31:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn num_tokens(&self, deps: Deps) -> StdResult<NumTokensResponse> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::Deps`, found struct `Deps`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: change the parameter type to match the trait: `cosmwasm_std::deps::Deps<'_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::Deps<'_>\u001b[0m\u001b[0m) -> Result<_, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1merrors::std_error::StdError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m              found fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mDeps<'_>\u001b[0m\u001b[0m) -> Result<_, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1mStdError\u001b[0m\u001b[0m>`\u001b[0m\n\n"}
{"message":"method `nft_info` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":1254,"byte_end":1258,"line_start":36,"line_end":36,"column_start":30,"column_end":34,"is_primary":true,"text":[{"text":"    fn nft_info(&self, deps: Deps, token_id: String) -> StdResult<NftInfoResponse<T>> {","highlight_start":30,"highlight_end":34}],"label":"expected struct `cosmwasm_std::deps::Deps`, found struct `Deps`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(&state::Cw721Contract<'a, T, C>, cosmwasm_std::deps::Deps<'_>, std::string::String) -> Result<_, cosmwasm_std::errors::std_error::StdError>`\n   found fn pointer `fn(&state::Cw721Contract<'a, T, C>, Deps<'_>, std::string::String) -> Result<_, cosmwasm_std::StdError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":1254,"byte_end":1258,"line_start":36,"line_end":36,"column_start":30,"column_end":34,"is_primary":true,"text":[{"text":"    fn nft_info(&self, deps: Deps, token_id: String) -> StdResult<NftInfoResponse<T>> {","highlight_start":30,"highlight_end":34}],"label":null,"suggested_replacement":"cosmwasm_std::deps::Deps<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `nft_info` has an incompatible type for trait\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:36:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn nft_info(&self, deps: Deps, token_id: String) -> StdResult<NftInfoResponse<T>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::Deps`, found struct `Deps`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: change the parameter type to match the trait: `cosmwasm_std::deps::Deps<'_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::Deps<'_>\u001b[0m\u001b[0m, std::string::String) -> Result<_, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1merrors::std_error::StdError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m              found fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mDeps<'_>\u001b[0m\u001b[0m, std::string::String) -> Result<_, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1mStdError\u001b[0m\u001b[0m>`\u001b[0m\n\n"}
{"message":"method `owner_of` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":1611,"byte_end":1615,"line_start":48,"line_end":48,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        deps: Deps,","highlight_start":15,"highlight_end":19}],"label":"expected struct `cosmwasm_std::deps::Deps`, found struct `Deps`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(&state::Cw721Contract<'a, T, C>, cosmwasm_std::deps::Deps<'_>, cosmwasm_std::types::Env, std::string::String, _) -> Result<_, cosmwasm_std::errors::std_error::StdError>`\n   found fn pointer `fn(&state::Cw721Contract<'a, T, C>, Deps<'_>, Env, std::string::String, _) -> Result<_, cosmwasm_std::StdError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":1611,"byte_end":1615,"line_start":48,"line_end":48,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        deps: Deps,","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":"cosmwasm_std::deps::Deps<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `owner_of` has an incompatible type for trait\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:48:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        deps: Deps,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::Deps`, found struct `Deps`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: change the parameter type to match the trait: `cosmwasm_std::deps::Deps<'_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::Deps<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::types::Env\u001b[0m\u001b[0m, std::string::String, _) -> Result<_, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1merrors::std_error::StdError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m              found fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mDeps<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mEnv\u001b[0m\u001b[0m, std::string::String, _) -> Result<_, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1mStdError\u001b[0m\u001b[0m>`\u001b[0m\n\n"}
{"message":"method `all_approvals` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":2013,"byte_end":2017,"line_start":62,"line_end":62,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        deps: Deps,","highlight_start":15,"highlight_end":19}],"label":"expected struct `cosmwasm_std::deps::Deps`, found struct `Deps`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(&state::Cw721Contract<'a, T, C>, cosmwasm_std::deps::Deps<'_>, cosmwasm_std::types::Env, std::string::String, _, std::option::Option<_>, std::option::Option<_>) -> Result<_, cosmwasm_std::errors::std_error::StdError>`\n   found fn pointer `fn(&state::Cw721Contract<'a, T, C>, Deps<'_>, Env, std::string::String, _, std::option::Option<_>, std::option::Option<_>) -> Result<_, cosmwasm_std::StdError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":2013,"byte_end":2017,"line_start":62,"line_end":62,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        deps: Deps,","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":"cosmwasm_std::deps::Deps<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `all_approvals` has an incompatible type for trait\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:62:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        deps: Deps,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::Deps`, found struct `Deps`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: change the parameter type to match the trait: `cosmwasm_std::deps::Deps<'_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::Deps<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::types::Env\u001b[0m\u001b[0m, std::string::String, _, std::option::Option<_>, std::option::Option<_>) -> Result<_, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1merrors::std_error::StdError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m              found fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mDeps<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mEnv\u001b[0m\u001b[0m, std::string::String, _, std::option::Option<_>, std::option::Option<_>) -> Result<_, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1mStdError\u001b[0m\u001b[0m>`\u001b[0m\n\n"}
{"message":"method `tokens` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":2959,"byte_end":2963,"line_start":89,"line_end":89,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        deps: Deps,","highlight_start":15,"highlight_end":19}],"label":"expected struct `cosmwasm_std::deps::Deps`, found struct `Deps`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(&state::Cw721Contract<'a, T, C>, cosmwasm_std::deps::Deps<'_>, std::string::String, std::option::Option<_>, std::option::Option<_>) -> Result<_, cosmwasm_std::errors::std_error::StdError>`\n   found fn pointer `fn(&state::Cw721Contract<'a, T, C>, Deps<'_>, std::string::String, std::option::Option<_>, std::option::Option<_>) -> Result<_, cosmwasm_std::StdError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":2959,"byte_end":2963,"line_start":89,"line_end":89,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        deps: Deps,","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":"cosmwasm_std::deps::Deps<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `tokens` has an incompatible type for trait\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:89:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        deps: Deps,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::Deps`, found struct `Deps`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: change the parameter type to match the trait: `cosmwasm_std::deps::Deps<'_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::Deps<'_>\u001b[0m\u001b[0m, std::string::String, std::option::Option<_>, std::option::Option<_>) -> Result<_, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1merrors::std_error::StdError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m              found fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mDeps<'_>\u001b[0m\u001b[0m, std::string::String, std::option::Option<_>, std::option::Option<_>) -> Result<_, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1mStdError\u001b[0m\u001b[0m>`\u001b[0m\n\n"}
{"message":"method `all_tokens` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":3762,"byte_end":3766,"line_start":114,"line_end":114,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        deps: Deps,","highlight_start":15,"highlight_end":19}],"label":"expected struct `cosmwasm_std::deps::Deps`, found struct `Deps`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(&state::Cw721Contract<'a, T, C>, cosmwasm_std::deps::Deps<'_>, std::option::Option<_>, std::option::Option<_>) -> Result<_, cosmwasm_std::errors::std_error::StdError>`\n   found fn pointer `fn(&state::Cw721Contract<'a, T, C>, Deps<'_>, std::option::Option<_>, std::option::Option<_>) -> Result<_, cosmwasm_std::StdError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":3762,"byte_end":3766,"line_start":114,"line_end":114,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        deps: Deps,","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":"cosmwasm_std::deps::Deps<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `all_tokens` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:114:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        deps: Deps,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::Deps`, found struct `Deps`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: change the parameter type to match the trait: `cosmwasm_std::deps::Deps<'_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::Deps<'_>\u001b[0m\u001b[0m, std::option::Option<_>, std::option::Option<_>) -> Result<_, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1merrors::std_error::StdError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mDeps<'_>\u001b[0m\u001b[0m, std::option::Option<_>, std::option::Option<_>) -> Result<_, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1mStdError\u001b[0m\u001b[0m>`\u001b[0m\n\n"}
{"message":"method `all_nft_info` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":4380,"byte_end":4384,"line_start":132,"line_end":132,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        deps: Deps,","highlight_start":15,"highlight_end":19}],"label":"expected struct `cosmwasm_std::deps::Deps`, found struct `Deps`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `fn(&state::Cw721Contract<'a, T, C>, cosmwasm_std::deps::Deps<'_>, cosmwasm_std::types::Env, std::string::String, _) -> Result<_, cosmwasm_std::errors::std_error::StdError>`\n   found fn pointer `fn(&state::Cw721Contract<'a, T, C>, Deps<'_>, Env, std::string::String, _) -> Result<_, cosmwasm_std::StdError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change the parameter type to match the trait","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":4380,"byte_end":4384,"line_start":132,"line_end":132,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        deps: Deps,","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":"cosmwasm_std::deps::Deps<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `all_nft_info` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:132:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        deps: Deps,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::Deps`, found struct `Deps`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: change the parameter type to match the trait: `cosmwasm_std::deps::Deps<'_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::Deps<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mcosmwasm_std::types::Env\u001b[0m\u001b[0m, std::string::String, _) -> Result<_, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1merrors::std_error::StdError\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstate::Cw721Contract<'a, T, C>, \u001b[0m\u001b[0m\u001b[1mDeps<'_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1mEnv\u001b[0m\u001b[0m, std::string::String, _) -> Result<_, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1mStdError\u001b[0m\u001b[0m>`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":962,"byte_end":974,"line_start":28,"line_end":28,"column_start":30,"column_end":42,"is_primary":true,"text":[{"text":"        set_contract_version(deps.storage, CONTRACT_NAME, CONTRACT_VERSION)?;","highlight_start":30,"highlight_end":42}],"label":"expected trait `cosmwasm_std::traits::Storage`, found trait `Storage`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected mutable reference `&mut dyn cosmwasm_std::traits::Storage`\n   found mutable reference `&mut dyn Storage`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:28:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_contract_version(deps.storage, CONTRACT_NAME, CONTRACT_VERSION)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected trait `cosmwasm_std::traits::Storage`, found trait `Storage`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected mutable reference `\u001b[0m\u001b[0m\u001b[1m&mut dyn cosmwasm_std::traits::Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found mutable reference `\u001b[0m\u001b[0m\u001b[1m&mut dyn Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `error::ContractError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":1008,"byte_end":1009,"line_start":28,"line_end":28,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"        set_contract_version(deps.storage, CONTRACT_NAME, CONTRACT_VERSION)?;","highlight_start":76,"highlight_end":77}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `error::ContractError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts/registrar/src/execute.rs","byte_start":1008,"byte_end":1009,"line_start":28,"line_end":28,"column_start":76,"column_end":77,"is_primary":false,"text":[{"text":"        set_contract_version(deps.storage, CONTRACT_NAME, CONTRACT_VERSION)?;","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"contracts/registrar/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <error::ContractError as From<cosmwasm_std::StdError>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<Response<C>, error::ContractError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `error::ContractError`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:28:76\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        set_contract_version(deps.storage, CONTRACT_NAME, CONTRACT_VERSION)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `error::ContractError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m             <error::ContractError as From<cosmwasm_std::StdError>>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<Response<C>, error::ContractError>`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3538,"byte_end":3542,"line_start":100,"line_end":100,"column_start":31,"column_end":35,"is_primary":true,"text":[{"text":"            } => self.approve(deps, env, info, spender, token_id, expires),","highlight_start":31,"highlight_end":35}],"label":"expected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `cosmwasm_std::deps::DepsMut<'_>`\n   found struct `DepsMut<'_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:100:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            } => self.approve(deps, env, info, spender, token_id, expires),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::DepsMut<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1mDepsMut<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3544,"byte_end":3547,"line_start":100,"line_end":100,"column_start":37,"column_end":40,"is_primary":true,"text":[{"text":"            } => self.approve(deps, env, info, spender, token_id, expires),","highlight_start":37,"highlight_end":40}],"label":"expected struct `cosmwasm_std::types::Env`, found struct `Env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:100:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            } => self.approve(deps, env, info, spender, token_id, expires),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::Env`, found struct `Env`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3549,"byte_end":3553,"line_start":100,"line_end":100,"column_start":42,"column_end":46,"is_primary":true,"text":[{"text":"            } => self.approve(deps, env, info, spender, token_id, expires),","highlight_start":42,"highlight_end":46}],"label":"expected struct `cosmwasm_std::types::MessageInfo`, found struct `MessageInfo`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:100:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            } => self.approve(deps, env, info, spender, token_id, expires),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::MessageInfo`, found struct `MessageInfo`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3574,"byte_end":3581,"line_start":100,"line_end":100,"column_start":67,"column_end":74,"is_primary":true,"text":[{"text":"            } => self.approve(deps, env, info, spender, token_id, expires),","highlight_start":67,"highlight_end":74}],"label":"expected enum `cw721::Expiration`, found enum `cw0::Expiration`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `std::option::Option<cw721::Expiration>`\n   found enum `std::option::Option<cw0::Expiration>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cw0` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:100:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            } => self.approve(deps, env, info, spender, token_id, expires),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `cw721::Expiration`, found enum `cw0::Expiration`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `std::option::Option<\u001b[0m\u001b[0m\u001b[1mcw721::Expiration\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found enum `std::option::Option<\u001b[0m\u001b[0m\u001b[1mcw0::Expiration\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cw0` are being used?\u001b[0m\n\n"}
{"message":"`match` arms have incompatible types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3525,"byte_end":3582,"line_start":100,"line_end":100,"column_start":18,"column_end":75,"is_primary":true,"text":[{"text":"            } => self.approve(deps, env, info, spender, token_id, expires),","highlight_start":18,"highlight_end":75}],"label":"expected struct `Response`, found struct `cosmwasm_std::results::response::Response`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/execute.rs","byte_start":3365,"byte_end":3396,"line_start":95,"line_end":95,"column_start":38,"column_end":69,"is_primary":false,"text":[{"text":"            ExecuteMsg::Mint(msg) => self.mint(deps, env, info, msg),","highlight_start":38,"highlight_end":69}],"label":"this and all prior arms are found to be of type `Result<Response<C>, error::ContractError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/execute.rs","byte_start":2404,"byte_end":4314,"line_start":72,"line_end":117,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match msg {","highlight_start":9,"highlight_end":20},{"text":"            // Only owner","highlight_start":1,"highlight_end":26},{"text":"            ExecuteMsg::AddController { address } => self.add_controller(deps, env, info, address),","highlight_start":1,"highlight_end":100},{"text":"            ExecuteMsg::RemoveController { address } => {","highlight_start":1,"highlight_end":58},{"text":"                self.remove_controller(deps, env, info, address)","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            ExecuteMsg::SetConfig { grace_period, registry_address, owner } => {","highlight_start":1,"highlight_end":81},{"text":"                self.set_config(deps, env, info, grace_period, registry_address, owner)","highlight_start":1,"highlight_end":88},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Only controller","highlight_start":1,"highlight_end":31},{"text":"            ExecuteMsg::Register {","highlight_start":1,"highlight_end":35},{"text":"                id,","highlight_start":1,"highlight_end":20},{"text":"                owner,","highlight_start":1,"highlight_end":23},{"text":"                duration,","highlight_start":1,"highlight_end":26},{"text":"                name,","highlight_start":1,"highlight_end":22},{"text":"            } => self.register(deps, env, info, id, owner, name, duration),","highlight_start":1,"highlight_end":76},{"text":"            ExecuteMsg::Renew { id, duration } => self.renew(deps, env, info, id, duration),","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // User","highlight_start":1,"highlight_end":20},{"text":"            ExecuteMsg::Reclaim { id, owner } => self.reclaim(deps, env, info, id, owner),","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Base CW721","highlight_start":1,"highlight_end":26},{"text":"            ExecuteMsg::Mint(msg) => self.mint(deps, env, info, msg),","highlight_start":1,"highlight_end":70},{"text":"            ExecuteMsg::Approve {","highlight_start":1,"highlight_end":34},{"text":"                spender,","highlight_start":1,"highlight_end":25},{"text":"                token_id,","highlight_start":1,"highlight_end":26},{"text":"                expires,","highlight_start":1,"highlight_end":25},{"text":"            } => self.approve(deps, env, info, spender, token_id, expires),","highlight_start":1,"highlight_end":76},{"text":"            ExecuteMsg::Revoke { spender, token_id } => {","highlight_start":1,"highlight_end":58},{"text":"                self.revoke(deps, env, info, spender, token_id)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            ExecuteMsg::ApproveAll { operator, expires } => {","highlight_start":1,"highlight_end":62},{"text":"                self.approve_all(deps, env, info, operator, expires)","highlight_start":1,"highlight_end":69},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            ExecuteMsg::RevokeAll { operator } => self.revoke_all(deps, env, info, operator),","highlight_start":1,"highlight_end":94},{"text":"            ExecuteMsg::TransferNft {","highlight_start":1,"highlight_end":38},{"text":"                recipient,","highlight_start":1,"highlight_end":27},{"text":"                token_id,","highlight_start":1,"highlight_end":26},{"text":"            } => self.transfer_nft(deps, env, info, recipient, token_id),","highlight_start":1,"highlight_end":74},{"text":"            ExecuteMsg::SendNft {","highlight_start":1,"highlight_end":34},{"text":"                contract,","highlight_start":1,"highlight_end":26},{"text":"                token_id,","highlight_start":1,"highlight_end":26},{"text":"                msg,","highlight_start":1,"highlight_end":21},{"text":"            } => self.send_nft(deps, env, info, contract, token_id, msg),","highlight_start":1,"highlight_end":74},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"`match` arms have incompatible types","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Result<Response<C>, _>`\n   found enum `Result<cosmwasm_std::results::response::Response<C>, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: `match` arms have incompatible types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:100:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match msg {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            // Only owner\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ExecuteMsg::AddController { address } => self.add_controller(deps, env, info, address),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ExecuteMsg::RemoveController { address } => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ExecuteMsg::Mint(msg) => self.mint(deps, env, info, msg),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis and all prior arms are found to be of type `Result<Response<C>, error::ContractError>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            } => self.approve(deps, env, info, spender, token_id, expires),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `Response`, found struct `cosmwasm_std::results::response::Response`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            } => self.send_nft(deps, env, info, contract, token_id, msg),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`match` arms have incompatible types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `Result<\u001b[0m\u001b[0m\u001b[1mResponse<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\u001b[0m               found enum `Result<\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::results::response::Response<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3670,"byte_end":3674,"line_start":102,"line_end":102,"column_start":29,"column_end":33,"is_primary":true,"text":[{"text":"                self.revoke(deps, env, info, spender, token_id)","highlight_start":29,"highlight_end":33}],"label":"expected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `cosmwasm_std::deps::DepsMut<'_>`\n   found struct `DepsMut<'_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:102:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                self.revoke(deps, env, info, spender, token_id)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::DepsMut<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1mDepsMut<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3676,"byte_end":3679,"line_start":102,"line_end":102,"column_start":35,"column_end":38,"is_primary":true,"text":[{"text":"                self.revoke(deps, env, info, spender, token_id)","highlight_start":35,"highlight_end":38}],"label":"expected struct `cosmwasm_std::types::Env`, found struct `Env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:102:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                self.revoke(deps, env, info, spender, token_id)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::Env`, found struct `Env`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3681,"byte_end":3685,"line_start":102,"line_end":102,"column_start":40,"column_end":44,"is_primary":true,"text":[{"text":"                self.revoke(deps, env, info, spender, token_id)","highlight_start":40,"highlight_end":44}],"label":"expected struct `cosmwasm_std::types::MessageInfo`, found struct `MessageInfo`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:102:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                self.revoke(deps, env, info, spender, token_id)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::MessageInfo`, found struct `MessageInfo`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3658,"byte_end":3705,"line_start":102,"line_end":102,"column_start":17,"column_end":64,"is_primary":true,"text":[{"text":"                self.revoke(deps, env, info, spender, token_id)","highlight_start":17,"highlight_end":64}],"label":"expected struct `Response`, found struct `cosmwasm_std::results::response::Response`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/execute.rs","byte_start":2359,"byte_end":2393,"line_start":71,"line_end":71,"column_start":10,"column_end":44,"is_primary":false,"text":[{"text":"    ) -> Result<Response<C>, ContractError> {","highlight_start":10,"highlight_end":44}],"label":"expected `Result<Response<C>, error::ContractError>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Result<Response<C>, _>`\n   found enum `Result<cosmwasm_std::results::response::Response<C>, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:102:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    ) -> Result<Response<C>, ContractError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `Result<Response<C>, error::ContractError>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                self.revoke(deps, env, info, spender, token_id)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `Response`, found struct `cosmwasm_std::results::response::Response`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `Result<\u001b[0m\u001b[0m\u001b[1mResponse<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\u001b[0m               found enum `Result<\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::results::response::Response<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3815,"byte_end":3819,"line_start":105,"line_end":105,"column_start":34,"column_end":38,"is_primary":true,"text":[{"text":"                self.approve_all(deps, env, info, operator, expires)","highlight_start":34,"highlight_end":38}],"label":"expected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `cosmwasm_std::deps::DepsMut<'_>`\n   found struct `DepsMut<'_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:105:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                self.approve_all(deps, env, info, operator, expires)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::DepsMut<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1mDepsMut<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3821,"byte_end":3824,"line_start":105,"line_end":105,"column_start":40,"column_end":43,"is_primary":true,"text":[{"text":"                self.approve_all(deps, env, info, operator, expires)","highlight_start":40,"highlight_end":43}],"label":"expected struct `cosmwasm_std::types::Env`, found struct `Env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:105:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                self.approve_all(deps, env, info, operator, expires)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::Env`, found struct `Env`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3826,"byte_end":3830,"line_start":105,"line_end":105,"column_start":45,"column_end":49,"is_primary":true,"text":[{"text":"                self.approve_all(deps, env, info, operator, expires)","highlight_start":45,"highlight_end":49}],"label":"expected struct `cosmwasm_std::types::MessageInfo`, found struct `MessageInfo`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:105:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                self.approve_all(deps, env, info, operator, expires)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::MessageInfo`, found struct `MessageInfo`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3842,"byte_end":3849,"line_start":105,"line_end":105,"column_start":61,"column_end":68,"is_primary":true,"text":[{"text":"                self.approve_all(deps, env, info, operator, expires)","highlight_start":61,"highlight_end":68}],"label":"expected enum `cw721::Expiration`, found enum `cw0::Expiration`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `std::option::Option<cw721::Expiration>`\n   found enum `std::option::Option<cw0::Expiration>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cw0` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:105:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                self.approve_all(deps, env, info, operator, expires)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `cw721::Expiration`, found enum `cw0::Expiration`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `std::option::Option<\u001b[0m\u001b[0m\u001b[1mcw721::Expiration\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found enum `std::option::Option<\u001b[0m\u001b[0m\u001b[1mcw0::Expiration\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cw0` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3798,"byte_end":3850,"line_start":105,"line_end":105,"column_start":17,"column_end":69,"is_primary":true,"text":[{"text":"                self.approve_all(deps, env, info, operator, expires)","highlight_start":17,"highlight_end":69}],"label":"expected struct `Response`, found struct `cosmwasm_std::results::response::Response`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/execute.rs","byte_start":2359,"byte_end":2393,"line_start":71,"line_end":71,"column_start":10,"column_end":44,"is_primary":false,"text":[{"text":"    ) -> Result<Response<C>, ContractError> {","highlight_start":10,"highlight_end":44}],"label":"expected `Result<Response<C>, error::ContractError>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Result<Response<C>, _>`\n   found enum `Result<cosmwasm_std::results::response::Response<C>, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:105:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    ) -> Result<Response<C>, ContractError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `Result<Response<C>, error::ContractError>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                self.approve_all(deps, env, info, operator, expires)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `Response`, found struct `cosmwasm_std::results::response::Response`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `Result<\u001b[0m\u001b[0m\u001b[1mResponse<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\u001b[0m               found enum `Result<\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::results::response::Response<C>\u001b[0m\u001b[0m, _>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3931,"byte_end":3935,"line_start":107,"line_end":107,"column_start":67,"column_end":71,"is_primary":true,"text":[{"text":"            ExecuteMsg::RevokeAll { operator } => self.revoke_all(deps, env, info, operator),","highlight_start":67,"highlight_end":71}],"label":"expected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `cosmwasm_std::deps::DepsMut<'_>`\n   found struct `DepsMut<'_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:107:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            ExecuteMsg::RevokeAll { operator } => self.revoke_all(deps, env, info, operator),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::DepsMut<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1mDepsMut<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3937,"byte_end":3940,"line_start":107,"line_end":107,"column_start":73,"column_end":76,"is_primary":true,"text":[{"text":"            ExecuteMsg::RevokeAll { operator } => self.revoke_all(deps, env, info, operator),","highlight_start":73,"highlight_end":76}],"label":"expected struct `cosmwasm_std::types::Env`, found struct `Env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:107:73\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            ExecuteMsg::RevokeAll { operator } => self.revoke_all(deps, env, info, operator),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::Env`, found struct `Env`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":3942,"byte_end":3946,"line_start":107,"line_end":107,"column_start":78,"column_end":82,"is_primary":true,"text":[{"text":"            ExecuteMsg::RevokeAll { operator } => self.revoke_all(deps, env, info, operator),","highlight_start":78,"highlight_end":82}],"label":"expected struct `cosmwasm_std::types::MessageInfo`, found struct `MessageInfo`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:107:78\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            ExecuteMsg::RevokeAll { operator } => self.revoke_all(deps, env, info, operator),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::MessageInfo`, found struct `MessageInfo`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":4085,"byte_end":4089,"line_start":111,"line_end":111,"column_start":36,"column_end":40,"is_primary":true,"text":[{"text":"            } => self.transfer_nft(deps, env, info, recipient, token_id),","highlight_start":36,"highlight_end":40}],"label":"expected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `cosmwasm_std::deps::DepsMut<'_>`\n   found struct `DepsMut<'_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:111:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            } => self.transfer_nft(deps, env, info, recipient, token_id),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::DepsMut<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1mDepsMut<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":4091,"byte_end":4094,"line_start":111,"line_end":111,"column_start":42,"column_end":45,"is_primary":true,"text":[{"text":"            } => self.transfer_nft(deps, env, info, recipient, token_id),","highlight_start":42,"highlight_end":45}],"label":"expected struct `cosmwasm_std::types::Env`, found struct `Env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:111:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            } => self.transfer_nft(deps, env, info, recipient, token_id),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::Env`, found struct `Env`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":4096,"byte_end":4100,"line_start":111,"line_end":111,"column_start":47,"column_end":51,"is_primary":true,"text":[{"text":"            } => self.transfer_nft(deps, env, info, recipient, token_id),","highlight_start":47,"highlight_end":51}],"label":"expected struct `cosmwasm_std::types::MessageInfo`, found struct `MessageInfo`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:111:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            } => self.transfer_nft(deps, env, info, recipient, token_id),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::MessageInfo`, found struct `MessageInfo`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":4262,"byte_end":4266,"line_start":116,"line_end":116,"column_start":32,"column_end":36,"is_primary":true,"text":[{"text":"            } => self.send_nft(deps, env, info, contract, token_id, msg),","highlight_start":32,"highlight_end":36}],"label":"expected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `cosmwasm_std::deps::DepsMut<'_>`\n   found struct `DepsMut<'_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:116:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            } => self.send_nft(deps, env, info, contract, token_id, msg),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::DepsMut`, found struct `DepsMut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::DepsMut<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1mDepsMut<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":4268,"byte_end":4271,"line_start":116,"line_end":116,"column_start":38,"column_end":41,"is_primary":true,"text":[{"text":"            } => self.send_nft(deps, env, info, contract, token_id, msg),","highlight_start":38,"highlight_end":41}],"label":"expected struct `cosmwasm_std::types::Env`, found struct `Env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:116:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            } => self.send_nft(deps, env, info, contract, token_id, msg),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::Env`, found struct `Env`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":4273,"byte_end":4277,"line_start":116,"line_end":116,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"            } => self.send_nft(deps, env, info, contract, token_id, msg),","highlight_start":43,"highlight_end":47}],"label":"expected struct `cosmwasm_std::types::MessageInfo`, found struct `MessageInfo`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:116:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            } => self.send_nft(deps, env, info, contract, token_id, msg),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::MessageInfo`, found struct `MessageInfo`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":4299,"byte_end":4302,"line_start":116,"line_end":116,"column_start":69,"column_end":72,"is_primary":true,"text":[{"text":"            } => self.send_nft(deps, env, info, contract, token_id, msg),","highlight_start":69,"highlight_end":72}],"label":"expected struct `cosmwasm_std::binary::Binary`, found struct `cosmwasm_std::Binary`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:116:69\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            } => self.send_nft(deps, env, info, contract, token_id, msg),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::binary::Binary`, found struct `cosmwasm_std::Binary`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":7282,"byte_end":7285,"line_start":229,"line_end":229,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            msg,","highlight_start":13,"highlight_end":16}],"label":"expected struct `cosmwasm_std::binary::Binary`, found struct `cosmwasm_std::Binary`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:229:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            msg,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::binary::Binary`, found struct `cosmwasm_std::Binary`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `error::ContractError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":7413,"byte_end":7414,"line_start":234,"line_end":234,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"            .add_message(send.into_cosmos_msg(contract.clone())?)","highlight_start":64,"highlight_end":65}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `error::ContractError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts/registrar/src/execute.rs","byte_start":7413,"byte_end":7414,"line_start":234,"line_end":234,"column_start":64,"column_end":65,"is_primary":false,"text":[{"text":"            .add_message(send.into_cosmos_msg(contract.clone())?)","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"contracts/registrar/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <error::ContractError as From<cosmwasm_std::StdError>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<Response<C>, error::ContractError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `error::ContractError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:234:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            .add_message(send.into_cosmos_msg(contract.clone())?)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `error::ContractError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <error::ContractError as From<cosmwasm_std::StdError>>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<Response<C>, error::ContractError>`\u001b[0m\n\n"}
{"message":"the trait bound `CosmosMsg<_>: From<cosmwasm_std::results::cosmos_msg::CosmosMsg<_>>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":7375,"byte_end":7414,"line_start":234,"line_end":234,"column_start":26,"column_end":65,"is_primary":true,"text":[{"text":"            .add_message(send.into_cosmos_msg(contract.clone())?)","highlight_start":26,"highlight_end":65}],"label":"the trait `From<cosmwasm_std::results::cosmos_msg::CosmosMsg<_>>` is not implemented for `CosmosMsg<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/execute.rs","byte_start":7363,"byte_end":7374,"line_start":234,"line_end":234,"column_start":14,"column_end":25,"is_primary":false,"text":[{"text":"            .add_message(send.into_cosmos_msg(contract.clone())?)","highlight_start":14,"highlight_end":25}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following implementations were found:\n  <CosmosMsg<T> as From<BankMsg>>\n  <CosmosMsg<T> as From<GovMsg>>\n  <CosmosMsg<T> as From<IbcMsg>>\n  <CosmosMsg<T> as From<WasmMsg>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `Into<CosmosMsg<_>>` for `cosmwasm_std::results::cosmos_msg::CosmosMsg<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Response::<T>::add_message`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":"required by a bound in this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/response.rs","byte_start":3700,"byte_end":3718,"line_start":114,"line_end":114,"column_start":44,"column_end":62,"is_primary":true,"text":[{"text":"    pub fn add_message(mut self, msg: impl Into<CosmosMsg<T>>) -> Self {","highlight_start":44,"highlight_end":62}],"label":"required by this bound in `Response::<T>::add_message`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `CosmosMsg<_>: From<cosmwasm_std::results::cosmos_msg::CosmosMsg<_>>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:234:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            .add_message(send.into_cosmos_msg(contract.clone())?)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::results::cosmos_msg::CosmosMsg<_>>` is not implemented for `CosmosMsg<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <CosmosMsg<T> as From<BankMsg>>\u001b[0m\n\u001b[0m              <CosmosMsg<T> as From<GovMsg>>\u001b[0m\n\u001b[0m              <CosmosMsg<T> as From<IbcMsg>>\u001b[0m\n\u001b[0m              <CosmosMsg<T> as From<WasmMsg>>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `Into<CosmosMsg<_>>` for `cosmwasm_std::results::cosmos_msg::CosmosMsg<_>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Response::<T>::add_message`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/response.rs:114:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn add_message(mut self, msg: impl Into<CosmosMsg<T>>) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Response::<T>::add_message`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":9018,"byte_end":9028,"line_start":286,"line_end":286,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"        if expires.is_expired(&env.block) {","highlight_start":31,"highlight_end":41}],"label":"expected struct `cosmwasm_std::types::BlockInfo`, found struct `BlockInfo`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&cosmwasm_std::types::BlockInfo`\n   found reference `&BlockInfo`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:286:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m286\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if expires.is_expired(&env.block) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::BlockInfo`, found struct `BlockInfo`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&cosmwasm_std::types::BlockInfo\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&BlockInfo\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":11802,"byte_end":11812,"line_start":371,"line_end":371,"column_start":35,"column_end":45,"is_primary":true,"text":[{"text":"            if expires.is_expired(&env.block) {","highlight_start":35,"highlight_end":45}],"label":"expected struct `cosmwasm_std::types::BlockInfo`, found struct `BlockInfo`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&cosmwasm_std::types::BlockInfo`\n   found reference `&BlockInfo`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:371:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m371\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            if expires.is_expired(&env.block) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::BlockInfo`, found struct `BlockInfo`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&cosmwasm_std::types::BlockInfo\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&BlockInfo\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":12733,"byte_end":12743,"line_start":404,"line_end":404,"column_start":34,"column_end":44,"is_primary":true,"text":[{"text":"                if ex.is_expired(&env.block) {","highlight_start":34,"highlight_end":44}],"label":"expected struct `cosmwasm_std::types::BlockInfo`, found struct `BlockInfo`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&cosmwasm_std::types::BlockInfo`\n   found reference `&BlockInfo`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:404:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                if ex.is_expired(&env.block) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::BlockInfo`, found struct `BlockInfo`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&cosmwasm_std::types::BlockInfo\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&BlockInfo\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":13965,"byte_end":13975,"line_start":446,"line_end":446,"column_start":34,"column_end":44,"is_primary":true,"text":[{"text":"                if ex.is_expired(&env.block) {","highlight_start":34,"highlight_end":44}],"label":"expected struct `cosmwasm_std::types::BlockInfo`, found struct `BlockInfo`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&cosmwasm_std::types::BlockInfo`\n   found reference `&BlockInfo`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:446:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m446\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                if ex.is_expired(&env.block) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::BlockInfo`, found struct `BlockInfo`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&cosmwasm_std::types::BlockInfo\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&BlockInfo\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"struct `cw721::NftInfoResponse<T>` has no field named `name`","code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":1417,"byte_end":1421,"line_start":39,"line_end":39,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"            name: info.name,","highlight_start":13,"highlight_end":17}],"label":"`cw721::NftInfoResponse<_>` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `token_uri`, `extension`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0560]\u001b[0m\u001b[0m\u001b[1m: struct `cw721::NftInfoResponse<T>` has no field named `name`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:39:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            name: info.name,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`cw721::NftInfoResponse<_>` does not have this field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `token_uri`, `extension`\u001b[0m\n\n"}
{"message":"struct `cw721::NftInfoResponse<T>` has no field named `description`","code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":1446,"byte_end":1457,"line_start":40,"line_end":40,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"            description: info.description,","highlight_start":13,"highlight_end":24}],"label":"`cw721::NftInfoResponse<_>` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `token_uri`, `extension`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0560]\u001b[0m\u001b[0m\u001b[1m: struct `cw721::NftInfoResponse<T>` has no field named `description`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:40:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            description: info.description,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`cw721::NftInfoResponse<_>` does not have this field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `token_uri`, `extension`\u001b[0m\n\n"}
{"message":"struct `cw721::NftInfoResponse<T>` has no field named `image`","code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":1489,"byte_end":1494,"line_start":41,"line_end":41,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"            image: info.image,","highlight_start":13,"highlight_end":18}],"label":"`cw721::NftInfoResponse<_>` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `token_uri`, `extension`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0560]\u001b[0m\u001b[0m\u001b[1m: struct `cw721::NftInfoResponse<T>` has no field named `image`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:41:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            image: info.image,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`cw721::NftInfoResponse<_>` does not have this field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `token_uri`, `extension`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":2744,"byte_end":2754,"line_start":79,"line_end":79,"column_start":84,"column_end":94,"is_primary":true,"text":[{"text":"                include_expired || r.is_err() || !r.as_ref().unwrap().1.is_expired(&env.block)","highlight_start":84,"highlight_end":94}],"label":"expected struct `cosmwasm_std::types::BlockInfo`, found struct `BlockInfo`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&cosmwasm_std::types::BlockInfo`\n   found reference `&BlockInfo`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:79:84\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                include_expired || r.is_err() || !r.as_ref().unwrap().1.is_expired(&env.block)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::BlockInfo`, found struct `BlockInfo`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&cosmwasm_std::types::BlockInfo\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found reference `\u001b[0m\u001b[0m\u001b[1m&BlockInfo\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":3387,"byte_end":3397,"line_start":102,"line_end":102,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"            .prefix(owner_addr)","highlight_start":21,"highlight_end":31}],"label":"expected tuple, found struct `Addr`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected tuple `(Addr, std::vec::Vec<u8>)`\n  found struct `Addr`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:102:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            .prefix(owner_addr)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected tuple, found struct `Addr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected tuple `\u001b[0m\u001b[0m\u001b[1m(Addr, std::vec::Vec<u8>)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found struct `\u001b[0m\u001b[0m\u001b[1mAddr\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"no method named `to_vec` found for reference `&Result<(), cosmwasm_std::StdError>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":3588,"byte_end":3594,"line_start":107,"line_end":107,"column_start":77,"column_end":83,"is_primary":true,"text":[{"text":"        let res: Result<Vec<_>, _> = pks.iter().map(|v| String::from_utf8(v.to_vec())).collect();","highlight_start":77,"highlight_end":83}],"label":"method not found in `&Result<(), cosmwasm_std::StdError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `to_vec` found for reference `&Result<(), cosmwasm_std::StdError>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:107:77\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let res: Result<Vec<_>, _> = pks.iter().map(|v| String::from_utf8(v.to_vec())).collect();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `&Result<(), cosmwasm_std::StdError>`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":4234,"byte_end":4236,"line_start":125,"line_end":125,"column_start":67,"column_end":69,"is_primary":true,"text":[{"text":"            .map(|item| item.map(|(k, _)| String::from_utf8_lossy(&k).to_string()))","highlight_start":67,"highlight_end":69}],"label":"expected slice `[u8]`, found struct `std::string::String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&[u8]`\n   found reference `&std::string::String`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:125:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            .map(|item| item.map(|(k, _)| String::from_utf8_lossy(&k).to_string()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected slice `[u8]`, found struct `std::string::String`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&[u8]\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&std::string::String\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"struct `cw721::NftInfoResponse<T>` has no field named `name`","code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":4835,"byte_end":4839,"line_start":144,"line_end":144,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"                name: info.name,","highlight_start":17,"highlight_end":21}],"label":"`cw721::NftInfoResponse<_>` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `token_uri`, `extension`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0560]\u001b[0m\u001b[0m\u001b[1m: struct `cw721::NftInfoResponse<T>` has no field named `name`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:144:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                name: info.name,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`cw721::NftInfoResponse<_>` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `token_uri`, `extension`\u001b[0m\n\n"}
{"message":"struct `cw721::NftInfoResponse<T>` has no field named `description`","code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":4868,"byte_end":4879,"line_start":145,"line_end":145,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"                description: info.description,","highlight_start":17,"highlight_end":28}],"label":"`cw721::NftInfoResponse<_>` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `token_uri`, `extension`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0560]\u001b[0m\u001b[0m\u001b[1m: struct `cw721::NftInfoResponse<T>` has no field named `description`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:145:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                description: info.description,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`cw721::NftInfoResponse<_>` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `token_uri`, `extension`\u001b[0m\n\n"}
{"message":"struct `cw721::NftInfoResponse<T>` has no field named `image`","code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":4915,"byte_end":4920,"line_start":146,"line_end":146,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"                image: info.image,","highlight_start":17,"highlight_end":22}],"label":"`cw721::NftInfoResponse<_>` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `token_uri`, `extension`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0560]\u001b[0m\u001b[0m\u001b[1m: struct `cw721::NftInfoResponse<T>` has no field named `image`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:146:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                image: info.image,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`cw721::NftInfoResponse<_>` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `token_uri`, `extension`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":7937,"byte_end":7941,"line_start":222,"line_end":222,"column_start":72,"column_end":76,"is_primary":true,"text":[{"text":"            QueryMsg::ContractInfo {} => to_binary(&self.contract_info(deps)?),","highlight_start":72,"highlight_end":76}],"label":"expected struct `cosmwasm_std::deps::Deps`, found struct `Deps`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `cosmwasm_std::deps::Deps<'_>`\n   found struct `Deps<'_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:222:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            QueryMsg::ContractInfo {} => to_binary(&self.contract_info(deps)?),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::Deps`, found struct `Deps`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::Deps<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1mDeps<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `cosmwasm_std::StdError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":7942,"byte_end":7943,"line_start":222,"line_end":222,"column_start":77,"column_end":78,"is_primary":true,"text":[{"text":"            QueryMsg::ContractInfo {} => to_binary(&self.contract_info(deps)?),","highlight_start":77,"highlight_end":78}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts/registrar/src/query.rs","byte_start":7942,"byte_end":7943,"line_start":222,"line_end":222,"column_start":77,"column_end":78,"is_primary":false,"text":[{"text":"            QueryMsg::ContractInfo {} => to_binary(&self.contract_info(deps)?),","highlight_start":77,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"contracts/registrar/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <cosmwasm_std::StdError as From<ConversionOverflowError>>\n  <cosmwasm_std::StdError as From<DivideByZeroError>>\n  <cosmwasm_std::StdError as From<FromUtf8Error>>\n  <cosmwasm_std::StdError as From<OverflowError>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<cosmwasm_std::Binary, cosmwasm_std::StdError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:222:77\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            QueryMsg::ContractInfo {} => to_binary(&self.contract_info(deps)?),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<ConversionOverflowError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<DivideByZeroError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<FromUtf8Error>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<OverflowError>>\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<cosmwasm_std::Binary, cosmwasm_std::StdError>`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":8017,"byte_end":8021,"line_start":223,"line_end":223,"column_start":72,"column_end":76,"is_primary":true,"text":[{"text":"            QueryMsg::NftInfo { token_id } => to_binary(&self.nft_info(deps, token_id)?),","highlight_start":72,"highlight_end":76}],"label":"expected struct `cosmwasm_std::deps::Deps`, found struct `Deps`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `cosmwasm_std::deps::Deps<'_>`\n   found struct `Deps<'_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:223:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            QueryMsg::NftInfo { token_id } => to_binary(&self.nft_info(deps, token_id)?),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::Deps`, found struct `Deps`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::Deps<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1mDeps<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `cosmwasm_std::StdError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":8032,"byte_end":8033,"line_start":223,"line_end":223,"column_start":87,"column_end":88,"is_primary":true,"text":[{"text":"            QueryMsg::NftInfo { token_id } => to_binary(&self.nft_info(deps, token_id)?),","highlight_start":87,"highlight_end":88}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts/registrar/src/query.rs","byte_start":8032,"byte_end":8033,"line_start":223,"line_end":223,"column_start":87,"column_end":88,"is_primary":false,"text":[{"text":"            QueryMsg::NftInfo { token_id } => to_binary(&self.nft_info(deps, token_id)?),","highlight_start":87,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"contracts/registrar/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <cosmwasm_std::StdError as From<ConversionOverflowError>>\n  <cosmwasm_std::StdError as From<DivideByZeroError>>\n  <cosmwasm_std::StdError as From<FromUtf8Error>>\n  <cosmwasm_std::StdError as From<OverflowError>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<cosmwasm_std::Binary, cosmwasm_std::StdError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:223:87\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            QueryMsg::NftInfo { token_id } => to_binary(&self.nft_info(deps, token_id)?),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<ConversionOverflowError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<DivideByZeroError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<FromUtf8Error>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<OverflowError>>\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<cosmwasm_std::Binary, cosmwasm_std::StdError>`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":8187,"byte_end":8191,"line_start":228,"line_end":228,"column_start":42,"column_end":46,"is_primary":true,"text":[{"text":"                to_binary(&self.owner_of(deps, env, token_id, include_expired.unwrap_or(false))?)","highlight_start":42,"highlight_end":46}],"label":"expected struct `cosmwasm_std::deps::Deps`, found struct `Deps`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `cosmwasm_std::deps::Deps<'_>`\n   found struct `Deps<'_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:228:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                to_binary(&self.owner_of(deps, env, token_id, include_expired.unwrap_or(false))?)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::Deps`, found struct `Deps`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::Deps<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1mDeps<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":8193,"byte_end":8196,"line_start":228,"line_end":228,"column_start":48,"column_end":51,"is_primary":true,"text":[{"text":"                to_binary(&self.owner_of(deps, env, token_id, include_expired.unwrap_or(false))?)","highlight_start":48,"highlight_end":51}],"label":"expected struct `cosmwasm_std::types::Env`, found struct `Env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:228:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                to_binary(&self.owner_of(deps, env, token_id, include_expired.unwrap_or(false))?)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::Env`, found struct `Env`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `cosmwasm_std::StdError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":8241,"byte_end":8242,"line_start":228,"line_end":228,"column_start":96,"column_end":97,"is_primary":true,"text":[{"text":"                to_binary(&self.owner_of(deps, env, token_id, include_expired.unwrap_or(false))?)","highlight_start":96,"highlight_end":97}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts/registrar/src/query.rs","byte_start":8241,"byte_end":8242,"line_start":228,"line_end":228,"column_start":96,"column_end":97,"is_primary":false,"text":[{"text":"                to_binary(&self.owner_of(deps, env, token_id, include_expired.unwrap_or(false))?)","highlight_start":96,"highlight_end":97}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"contracts/registrar/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <cosmwasm_std::StdError as From<ConversionOverflowError>>\n  <cosmwasm_std::StdError as From<DivideByZeroError>>\n  <cosmwasm_std::StdError as From<FromUtf8Error>>\n  <cosmwasm_std::StdError as From<OverflowError>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<cosmwasm_std::Binary, cosmwasm_std::StdError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:228:96\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                to_binary(&self.owner_of(deps, env, token_id, include_expired.unwrap_or(false))?)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<ConversionOverflowError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<DivideByZeroError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<FromUtf8Error>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<OverflowError>>\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<cosmwasm_std::Binary, cosmwasm_std::StdError>`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":8415,"byte_end":8419,"line_start":234,"line_end":234,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"                deps,","highlight_start":17,"highlight_end":21}],"label":"expected struct `cosmwasm_std::deps::Deps`, found struct `Deps`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `cosmwasm_std::deps::Deps<'_>`\n   found struct `Deps<'_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:234:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                deps,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::Deps`, found struct `Deps`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::Deps<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1mDeps<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":8437,"byte_end":8440,"line_start":235,"line_end":235,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                env,","highlight_start":17,"highlight_end":20}],"label":"expected struct `cosmwasm_std::types::Env`, found struct `Env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:235:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m235\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                env,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::Env`, found struct `Env`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `cosmwasm_std::StdError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":8531,"byte_end":8532,"line_start":238,"line_end":238,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"            )?),","highlight_start":14,"highlight_end":15}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts/registrar/src/query.rs","byte_start":8531,"byte_end":8532,"line_start":238,"line_end":238,"column_start":14,"column_end":15,"is_primary":false,"text":[{"text":"            )?),","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"contracts/registrar/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <cosmwasm_std::StdError as From<ConversionOverflowError>>\n  <cosmwasm_std::StdError as From<DivideByZeroError>>\n  <cosmwasm_std::StdError as From<FromUtf8Error>>\n  <cosmwasm_std::StdError as From<OverflowError>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<cosmwasm_std::Binary, cosmwasm_std::StdError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:238:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            )?),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<ConversionOverflowError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<DivideByZeroError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<FromUtf8Error>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<OverflowError>>\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<cosmwasm_std::Binary, cosmwasm_std::StdError>`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":8746,"byte_end":8750,"line_start":245,"line_end":245,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"                deps,","highlight_start":17,"highlight_end":21}],"label":"expected struct `cosmwasm_std::deps::Deps`, found struct `Deps`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `cosmwasm_std::deps::Deps<'_>`\n   found struct `Deps<'_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:245:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m245\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                deps,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::Deps`, found struct `Deps`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::Deps<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1mDeps<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":8768,"byte_end":8771,"line_start":246,"line_end":246,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"                env,","highlight_start":17,"highlight_end":20}],"label":"expected struct `cosmwasm_std::types::Env`, found struct `Env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:246:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m246\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                env,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::Env`, found struct `Env`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `cosmwasm_std::StdError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":8911,"byte_end":8912,"line_start":251,"line_end":251,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"            )?),","highlight_start":14,"highlight_end":15}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts/registrar/src/query.rs","byte_start":8911,"byte_end":8912,"line_start":251,"line_end":251,"column_start":14,"column_end":15,"is_primary":false,"text":[{"text":"            )?),","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"contracts/registrar/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <cosmwasm_std::StdError as From<ConversionOverflowError>>\n  <cosmwasm_std::StdError as From<DivideByZeroError>>\n  <cosmwasm_std::StdError as From<FromUtf8Error>>\n  <cosmwasm_std::StdError as From<OverflowError>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<cosmwasm_std::Binary, cosmwasm_std::StdError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:251:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m251\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            )?),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<ConversionOverflowError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<DivideByZeroError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<FromUtf8Error>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<OverflowError>>\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<cosmwasm_std::Binary, cosmwasm_std::StdError>`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":8980,"byte_end":8984,"line_start":252,"line_end":252,"column_start":66,"column_end":70,"is_primary":true,"text":[{"text":"            QueryMsg::NumTokens {} => to_binary(&self.num_tokens(deps)?),","highlight_start":66,"highlight_end":70}],"label":"expected struct `cosmwasm_std::deps::Deps`, found struct `Deps`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `cosmwasm_std::deps::Deps<'_>`\n   found struct `Deps<'_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:252:66\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m252\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            QueryMsg::NumTokens {} => to_binary(&self.num_tokens(deps)?),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::Deps`, found struct `Deps`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::Deps<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1mDeps<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `cosmwasm_std::StdError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":8985,"byte_end":8986,"line_start":252,"line_end":252,"column_start":71,"column_end":72,"is_primary":true,"text":[{"text":"            QueryMsg::NumTokens {} => to_binary(&self.num_tokens(deps)?),","highlight_start":71,"highlight_end":72}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts/registrar/src/query.rs","byte_start":8985,"byte_end":8986,"line_start":252,"line_end":252,"column_start":71,"column_end":72,"is_primary":false,"text":[{"text":"            QueryMsg::NumTokens {} => to_binary(&self.num_tokens(deps)?),","highlight_start":71,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"contracts/registrar/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <cosmwasm_std::StdError as From<ConversionOverflowError>>\n  <cosmwasm_std::StdError as From<DivideByZeroError>>\n  <cosmwasm_std::StdError as From<FromUtf8Error>>\n  <cosmwasm_std::StdError as From<OverflowError>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<cosmwasm_std::Binary, cosmwasm_std::StdError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:252:71\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m252\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            QueryMsg::NumTokens {} => to_binary(&self.num_tokens(deps)?),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<ConversionOverflowError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<DivideByZeroError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<FromUtf8Error>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<OverflowError>>\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<cosmwasm_std::Binary, cosmwasm_std::StdError>`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":9135,"byte_end":9139,"line_start":257,"line_end":257,"column_start":41,"column_end":45,"is_primary":true,"text":[{"text":"            } => to_binary(&self.tokens(deps, owner, start_after, limit)?),","highlight_start":41,"highlight_end":45}],"label":"expected struct `cosmwasm_std::deps::Deps`, found struct `Deps`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `cosmwasm_std::deps::Deps<'_>`\n   found struct `Deps<'_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:257:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            } => to_binary(&self.tokens(deps, owner, start_after, limit)?),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::Deps`, found struct `Deps`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::Deps<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1mDeps<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `cosmwasm_std::StdError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":9167,"byte_end":9168,"line_start":257,"line_end":257,"column_start":73,"column_end":74,"is_primary":true,"text":[{"text":"            } => to_binary(&self.tokens(deps, owner, start_after, limit)?),","highlight_start":73,"highlight_end":74}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts/registrar/src/query.rs","byte_start":9167,"byte_end":9168,"line_start":257,"line_end":257,"column_start":73,"column_end":74,"is_primary":false,"text":[{"text":"            } => to_binary(&self.tokens(deps, owner, start_after, limit)?),","highlight_start":73,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"contracts/registrar/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <cosmwasm_std::StdError as From<ConversionOverflowError>>\n  <cosmwasm_std::StdError as From<DivideByZeroError>>\n  <cosmwasm_std::StdError as From<FromUtf8Error>>\n  <cosmwasm_std::StdError as From<OverflowError>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<cosmwasm_std::Binary, cosmwasm_std::StdError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:257:73\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            } => to_binary(&self.tokens(deps, owner, start_after, limit)?),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<ConversionOverflowError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<DivideByZeroError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<FromUtf8Error>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<OverflowError>>\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<cosmwasm_std::Binary, cosmwasm_std::StdError>`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":9274,"byte_end":9278,"line_start":259,"line_end":259,"column_start":44,"column_end":48,"is_primary":true,"text":[{"text":"                to_binary(&self.all_tokens(deps, start_after, limit)?)","highlight_start":44,"highlight_end":48}],"label":"expected struct `cosmwasm_std::deps::Deps`, found struct `Deps`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `cosmwasm_std::deps::Deps<'_>`\n   found struct `Deps<'_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:259:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                to_binary(&self.all_tokens(deps, start_after, limit)?)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::deps::Deps`, found struct `Deps`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::deps::Deps<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1mDeps<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"`?` couldn't convert the error to `cosmwasm_std::StdError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":9299,"byte_end":9300,"line_start":259,"line_end":259,"column_start":69,"column_end":70,"is_primary":true,"text":[{"text":"                to_binary(&self.all_tokens(deps, start_after, limit)?)","highlight_start":69,"highlight_end":70}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts/registrar/src/query.rs","byte_start":9299,"byte_end":9300,"line_start":259,"line_end":259,"column_start":69,"column_end":70,"is_primary":false,"text":[{"text":"                to_binary(&self.all_tokens(deps, start_after, limit)?)","highlight_start":69,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"contracts/registrar/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following implementations were found:\n  <cosmwasm_std::StdError as From<ConversionOverflowError>>\n  <cosmwasm_std::StdError as From<DivideByZeroError>>\n  <cosmwasm_std::StdError as From<FromUtf8Error>>\n  <cosmwasm_std::StdError as From<OverflowError>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<cosmwasm_std::Binary, cosmwasm_std::StdError>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:259:69\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                to_binary(&self.all_tokens(deps, start_after, limit)?)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<ConversionOverflowError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<DivideByZeroError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<FromUtf8Error>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<OverflowError>>\u001b[0m\n\u001b[0m            and 3 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>` for `Result<cosmwasm_std::Binary, cosmwasm_std::StdError>`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":1731,"byte_end":1746,"line_start":61,"line_end":61,"column_start":36,"column_end":51,"is_primary":true,"text":[{"text":"            owner: MultiIndex::new(token_owner_idx, tokens_key, tokens_owner_key),","highlight_start":36,"highlight_end":51}],"label":"incorrect number of function parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer `for<'r> fn(&'r state::TokenInfo<_>) -> (Addr, std::vec::Vec<_>)`\n      found fn item `for<'r> fn(&'r state::TokenInfo<_>, std::vec::Vec<u8>) -> (Addr, std::vec::Vec<_>) {state::token_owner_idx::<_>}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:61:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            owner: MultiIndex::new(token_owner_idx, tokens_key, tokens_owner_key),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mincorrect number of function parameters\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'r> fn(\u001b[0m\u001b[0m\u001b[1m&'r state::TokenInfo<_>\u001b[0m\u001b[0m) -> (Addr, std::vec::Vec<_>)`\u001b[0m\n\u001b[0m                 found fn item `for<'r> fn(\u001b[0m\u001b[0m\u001b[1m&'r state::TokenInfo<_>, std::vec::Vec<u8>\u001b[0m\u001b[0m) -> (Addr, std::vec::Vec<_>) {state::token_owner_idx::<_>}`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":3679,"byte_end":3684,"line_start":118,"line_end":118,"column_start":33,"column_end":38,"is_primary":true,"text":[{"text":"        self.expires.is_expired(block)","highlight_start":33,"highlight_end":38}],"label":"expected struct `cosmwasm_std::types::BlockInfo`, found struct `BlockInfo`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&cosmwasm_std::types::BlockInfo`\n   found reference `&BlockInfo`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:118:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        self.expires.is_expired(block)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::types::BlockInfo`, found struct `BlockInfo`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&cosmwasm_std::types::BlockInfo\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&BlockInfo\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"the trait bound `cosmwasm_std::Empty: cw721::CustomMsg` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":1313,"byte_end":1324,"line_start":36,"line_end":36,"column_start":24,"column_end":35,"is_primary":true,"text":[{"text":"    let res = contract.instantiate(deps, mock_env(), info, msg).unwrap();","highlight_start":24,"highlight_end":35}],"label":"the trait `cw721::CustomMsg` is not implemented for `cosmwasm_std::Empty`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required by a bound in `execute::<impl state::Cw721Contract<'a, T, C>>::instantiate`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/execute.rs","byte_start":761,"byte_end":772,"line_start":21,"line_end":21,"column_start":12,"column_end":23,"is_primary":false,"text":[{"text":"    pub fn instantiate(","highlight_start":12,"highlight_end":23}],"label":"required by a bound in this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/execute.rs","byte_start":737,"byte_end":746,"line_start":19,"line_end":19,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    C: CustomMsg,","highlight_start":8,"highlight_end":17}],"label":"required by this bound in `execute::<impl state::Cw721Contract<'a, T, C>>::instantiate`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `cosmwasm_std::Empty: cw721::CustomMsg` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:36:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let res = contract.instantiate(deps, mock_env(), info, msg).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `cw721::CustomMsg` is not implemented for `cosmwasm_std::Empty`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `execute::<impl state::Cw721Contract<'a, T, C>>::instantiate`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/execute.rs:19:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    C: CustomMsg,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `execute::<impl state::Cw721Contract<'a, T, C>>::instantiate`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn instantiate(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this\u001b[0m\n\n"}
{"message":"this function takes 0 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":1492,"byte_end":1495,"line_start":43,"line_end":43,"column_start":38,"column_end":41,"is_primary":false,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":38,"highlight_end":41}],"label":"supplied 1 argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":1474,"byte_end":1491,"line_start":43,"line_end":43,"column_start":20,"column_end":37,"is_primary":true,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":20,"highlight_end":37}],"label":"expected 0 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs","byte_start":1556,"byte_end":1573,"line_start":40,"line_end":40,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"pub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 0 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:43:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut deps = mock_dependencies(&[]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 1 argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 0 arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs:40:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `instantiate` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `instantiate` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":1984,"byte_end":1995,"line_start":58,"line_end":58,"column_start":10,"column_end":21,"is_primary":true,"text":[{"text":"        .instantiate(deps.as_mut(), mock_env(), info, msg)","highlight_start":10,"highlight_end":21}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `instantiate` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:58:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .instantiate(deps.as_mut(), mock_env(), info, msg)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `instantiate` not found for this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `minter` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `minter` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":2156,"byte_end":2162,"line_start":63,"line_end":63,"column_start":24,"column_end":30,"is_primary":true,"text":[{"text":"    let res = contract.minter(deps.as_ref()).unwrap();","highlight_start":24,"highlight_end":30}],"label":"field, not a method","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the arguments","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":2162,"byte_end":2177,"line_start":63,"line_end":63,"column_start":30,"column_end":45,"is_primary":true,"text":[{"text":"    let res = contract.minter(deps.as_ref()).unwrap();","highlight_start":30,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `minter` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:63:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    let res = contract.minter(deps.as_ref()).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove the arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfield, not a method\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `minter` not found for this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `contract_info` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `contract_info` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":2251,"byte_end":2264,"line_start":65,"line_end":65,"column_start":25,"column_end":38,"is_primary":true,"text":[{"text":"    let info = contract.contract_info(deps.as_ref()).unwrap();","highlight_start":25,"highlight_end":38}],"label":"field, not a method","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the arguments","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":2264,"byte_end":2279,"line_start":65,"line_end":65,"column_start":38,"column_end":53,"is_primary":true,"text":[{"text":"    let info = contract.contract_info(deps.as_ref()).unwrap();","highlight_start":38,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `contract_info` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:65:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    let info = contract.contract_info(deps.as_ref()).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove the arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfield, not a method\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `contract_info` not found for this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `num_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `num_tokens` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":2479,"byte_end":2489,"line_start":74,"line_end":74,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"    let count = contract.num_tokens(deps.as_ref()).unwrap();","highlight_start":26,"highlight_end":36}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `num_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:74:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    let count = contract.num_tokens(deps.as_ref()).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `num_tokens` not found for this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `all_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `all_tokens` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":2600,"byte_end":2610,"line_start":78,"line_end":78,"column_start":27,"column_end":37,"is_primary":true,"text":[{"text":"    let tokens = contract.all_tokens(deps.as_ref(), None, None).unwrap();","highlight_start":27,"highlight_end":37}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `all_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:78:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    let tokens = contract.all_tokens(deps.as_ref(), None, None).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `all_tokens` not found for this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"this function takes 0 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":2751,"byte_end":2754,"line_start":84,"line_end":84,"column_start":38,"column_end":41,"is_primary":false,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":38,"highlight_end":41}],"label":"supplied 1 argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":2733,"byte_end":2750,"line_start":84,"line_end":84,"column_start":20,"column_end":37,"is_primary":true,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":20,"highlight_end":37}],"label":"expected 0 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs","byte_start":1556,"byte_end":1573,"line_start":40,"line_end":40,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"pub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 0 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:84:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut deps = mock_dependencies(&[]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 1 argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 0 arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs:40:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":3367,"byte_end":3374,"line_start":103,"line_end":103,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), random, mint_msg.clone())","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:103:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), random, mint_msg.clone())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":3703,"byte_end":3710,"line_start":115,"line_end":115,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), allowed, mint_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:115:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), allowed, mint_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `num_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `num_tokens` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":3837,"byte_end":3847,"line_start":119,"line_end":119,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"    let count = contract.num_tokens(deps.as_ref()).unwrap();","highlight_start":26,"highlight_end":36}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `num_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:119:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    let count = contract.num_tokens(deps.as_ref()).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `num_tokens` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `nft_info` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `nft_info` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":3969,"byte_end":3977,"line_start":124,"line_end":124,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"        .nft_info(deps.as_ref(), \"unknown\".to_string())","highlight_start":10,"highlight_end":18}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `nft_info` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:124:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .nft_info(deps.as_ref(), \"unknown\".to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `nft_info` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `nft_info` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `nft_info` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":4096,"byte_end":4104,"line_start":128,"line_end":128,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"    let info = contract.nft_info(deps.as_ref(), token_id.clone()).unwrap();","highlight_start":25,"highlight_end":33}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `nft_info` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:128:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    let info = contract.nft_info(deps.as_ref(), token_id.clone()).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `nft_info` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"struct `cw721::NftInfoResponse<tns::registrar::Extension>` has no field named `name`","code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":4229,"byte_end":4233,"line_start":132,"line_end":132,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"            name,","highlight_start":13,"highlight_end":17}],"label":"`cw721::NftInfoResponse<tns::registrar::Extension>` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `token_uri`, `extension`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0560]\u001b[0m\u001b[0m\u001b[1m: struct `cw721::NftInfoResponse<tns::registrar::Extension>` has no field named `name`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:132:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            name,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`cw721::NftInfoResponse<tns::registrar::Extension>` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `token_uri`, `extension`\u001b[0m\n\n"}
{"message":"struct `cw721::NftInfoResponse<tns::registrar::Extension>` has no field named `description`","code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":4247,"byte_end":4258,"line_start":133,"line_end":133,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"            description,","highlight_start":13,"highlight_end":24}],"label":"`cw721::NftInfoResponse<tns::registrar::Extension>` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `token_uri`, `extension`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0560]\u001b[0m\u001b[0m\u001b[1m: struct `cw721::NftInfoResponse<tns::registrar::Extension>` has no field named `description`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:133:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            description,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`cw721::NftInfoResponse<tns::registrar::Extension>` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `token_uri`, `extension`\u001b[0m\n\n"}
{"message":"struct `cw721::NftInfoResponse<tns::registrar::Extension>` has no field named `image`","code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":4272,"byte_end":4277,"line_start":134,"line_end":134,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"            image: None,","highlight_start":13,"highlight_end":18}],"label":"`cw721::NftInfoResponse<tns::registrar::Extension>` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `token_uri`, `extension`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0560]\u001b[0m\u001b[0m\u001b[1m: struct `cw721::NftInfoResponse<tns::registrar::Extension>` has no field named `image`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:134:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            image: None,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`cw721::NftInfoResponse<tns::registrar::Extension>` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `token_uri`, `extension`\u001b[0m\n\n"}
{"message":"the method `owner_of` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `owner_of` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":4403,"byte_end":4411,"line_start":141,"line_end":141,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"        .owner_of(deps.as_ref(), mock_env(), token_id.clone(), true)","highlight_start":10,"highlight_end":18}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `owner_of` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:141:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .owner_of(deps.as_ref(), mock_env(), token_id.clone(), true)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `owner_of` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":5007,"byte_end":5014,"line_start":163,"line_end":163,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), allowed, mint_msg2)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:163:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), allowed, mint_msg2)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `all_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `all_tokens` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":5186,"byte_end":5196,"line_start":168,"line_end":168,"column_start":27,"column_end":37,"is_primary":true,"text":[{"text":"    let tokens = contract.all_tokens(deps.as_ref(), None, None).unwrap();","highlight_start":27,"highlight_end":37}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `all_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:168:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    let tokens = contract.all_tokens(deps.as_ref(), None, None).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `all_tokens` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"this function takes 0 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":5393,"byte_end":5396,"line_start":175,"line_end":175,"column_start":38,"column_end":41,"is_primary":false,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":38,"highlight_end":41}],"label":"supplied 1 argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":5375,"byte_end":5392,"line_start":175,"line_end":175,"column_start":20,"column_end":37,"is_primary":true,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":20,"highlight_end":37}],"label":"expected 0 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs","byte_start":1556,"byte_end":1573,"line_start":40,"line_end":40,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"pub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 0 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:175:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut deps = mock_dependencies(&[]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 1 argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 0 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs:40:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":5961,"byte_end":5968,"line_start":194,"line_end":194,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), minter, mint_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:194:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), minter, mint_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":6275,"byte_end":6282,"line_start":205,"line_end":205,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), random, transfer_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:205:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), random, transfer_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":6752,"byte_end":6759,"line_start":222,"line_end":222,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), random, transfer_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:222:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), random, transfer_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"this function takes 0 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":7154,"byte_end":7157,"line_start":237,"line_end":237,"column_start":38,"column_end":41,"is_primary":false,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":38,"highlight_end":41}],"label":"supplied 1 argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":7136,"byte_end":7153,"line_start":237,"line_end":237,"column_start":20,"column_end":37,"is_primary":true,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":20,"highlight_end":37}],"label":"expected 0 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs","byte_start":1556,"byte_end":1573,"line_start":40,"line_end":40,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"pub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 0 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:237:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m237\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut deps = mock_dependencies(&[]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 1 argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 0 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs:40:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":7722,"byte_end":7729,"line_start":256,"line_end":256,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), minter, mint_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:256:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), minter, mint_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":8134,"byte_end":8141,"line_start":269,"line_end":269,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), random, send_msg.clone())","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:269:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m269\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), random, send_msg.clone())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":8483,"byte_end":8490,"line_start":281,"line_end":281,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), random, send_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:281:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), random, send_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":8675,"byte_end":8678,"line_start":287,"line_end":287,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        msg,","highlight_start":9,"highlight_end":12}],"label":"expected struct `cosmwasm_std::binary::Binary`, found struct `cosmwasm_std::Binary`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:287:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        msg,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `cosmwasm_std::binary::Binary`, found struct `cosmwasm_std::Binary`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":8842,"byte_end":8897,"line_start":292,"line_end":292,"column_start":9,"column_end":64,"is_primary":true,"text":[{"text":"        CosmosMsg::Wasm(WasmMsg::Execute { contract_addr, .. }) => {","highlight_start":9,"highlight_end":64}],"label":"expected enum `cosmwasm_std::results::cosmos_msg::CosmosMsg`, found enum `CosmosMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":8822,"byte_end":8831,"line_start":291,"line_end":291,"column_start":11,"column_end":20,"is_primary":false,"text":[{"text":"    match &expected {","highlight_start":11,"highlight_end":20}],"label":"this expression has type `&cosmwasm_std::results::cosmos_msg::CosmosMsg<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `cosmwasm_std::results::cosmos_msg::CosmosMsg<_>`\n   found enum `CosmosMsg<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:292:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m291\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    match &expected {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis expression has type `&cosmwasm_std::results::cosmos_msg::CosmosMsg<_>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m292\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        CosmosMsg::Wasm(WasmMsg::Execute { contract_addr, .. }) => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `cosmwasm_std::results::cosmos_msg::CosmosMsg`, found enum `CosmosMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `\u001b[0m\u001b[0m\u001b[1mcosmwasm_std::results::cosmos_msg::CosmosMsg<_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1mCosmosMsg<_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\n"}
{"message":"the trait bound `CosmosMsg<_>: From<cosmwasm_std::results::cosmos_msg::CosmosMsg<_>>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":9163,"byte_end":9171,"line_start":301,"line_end":301,"column_start":26,"column_end":34,"is_primary":true,"text":[{"text":"            .add_message(expected)","highlight_start":26,"highlight_end":34}],"label":"the trait `From<cosmwasm_std::results::cosmos_msg::CosmosMsg<_>>` is not implemented for `CosmosMsg<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":9151,"byte_end":9162,"line_start":301,"line_end":301,"column_start":14,"column_end":25,"is_primary":false,"text":[{"text":"            .add_message(expected)","highlight_start":14,"highlight_end":25}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following implementations were found:\n  <CosmosMsg<T> as From<BankMsg>>\n  <CosmosMsg<T> as From<GovMsg>>\n  <CosmosMsg<T> as From<IbcMsg>>\n  <CosmosMsg<T> as From<WasmMsg>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `Into<CosmosMsg<_>>` for `cosmwasm_std::results::cosmos_msg::CosmosMsg<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Response::<T>::add_message`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":"required by a bound in this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/response.rs","byte_start":3700,"byte_end":3718,"line_start":114,"line_end":114,"column_start":44,"column_end":62,"is_primary":true,"text":[{"text":"    pub fn add_message(mut self, msg: impl Into<CosmosMsg<T>>) -> Self {","highlight_start":44,"highlight_end":62}],"label":"required by this bound in `Response::<T>::add_message`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `CosmosMsg<_>: From<cosmwasm_std::results::cosmos_msg::CosmosMsg<_>>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:301:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            .add_message(expected)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::results::cosmos_msg::CosmosMsg<_>>` is not implemented for `CosmosMsg<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <CosmosMsg<T> as From<BankMsg>>\u001b[0m\n\u001b[0m              <CosmosMsg<T> as From<GovMsg>>\u001b[0m\n\u001b[0m              <CosmosMsg<T> as From<IbcMsg>>\u001b[0m\n\u001b[0m              <CosmosMsg<T> as From<WasmMsg>>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `Into<CosmosMsg<_>>` for `cosmwasm_std::results::cosmos_msg::CosmosMsg<_>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Response::<T>::add_message`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/response.rs:114:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn add_message(mut self, msg: impl Into<CosmosMsg<T>>) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Response::<T>::add_message`\u001b[0m\n\n"}
{"message":"this function takes 0 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":9458,"byte_end":9461,"line_start":311,"line_end":311,"column_start":38,"column_end":41,"is_primary":false,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":38,"highlight_end":41}],"label":"supplied 1 argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":9440,"byte_end":9457,"line_start":311,"line_end":311,"column_start":20,"column_end":37,"is_primary":true,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":20,"highlight_end":37}],"label":"expected 0 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs","byte_start":1556,"byte_end":1573,"line_start":40,"line_end":40,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"pub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 0 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:311:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut deps = mock_dependencies(&[]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 1 argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 0 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs:40:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":10008,"byte_end":10015,"line_start":330,"line_end":330,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), minter, mint_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:330:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m330\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), minter, mint_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":10345,"byte_end":10352,"line_start":341,"line_end":341,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), owner, approve_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:341:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m341\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), owner, approve_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":10912,"byte_end":10919,"line_start":359,"line_end":359,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), random, transfer_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:359:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m359\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), random, transfer_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `query` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `query` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":11217,"byte_end":11222,"line_start":369,"line_end":369,"column_start":14,"column_end":19,"is_primary":true,"text":[{"text":"            .query(deps.as_ref(), mock_env(), query_msg.clone())","highlight_start":14,"highlight_end":19}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `query` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:369:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m369\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            .query(deps.as_ref(), mock_env(), query_msg.clone())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `query` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":11735,"byte_end":11742,"line_start":389,"line_end":389,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), owner.clone(), approve_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:389:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m389\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), owner.clone(), approve_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":11948,"byte_end":11955,"line_start":397,"line_end":397,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), owner, revoke_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:397:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m397\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), owner, revoke_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `query` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `query` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":12140,"byte_end":12145,"line_start":403,"line_end":403,"column_start":14,"column_end":19,"is_primary":true,"text":[{"text":"            .query(deps.as_ref(), mock_env(), query_msg)","highlight_start":14,"highlight_end":19}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `query` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:403:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m403\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            .query(deps.as_ref(), mock_env(), query_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `query` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"this function takes 0 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":12456,"byte_end":12459,"line_start":418,"line_end":418,"column_start":38,"column_end":41,"is_primary":false,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":38,"highlight_end":41}],"label":"supplied 1 argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":12438,"byte_end":12455,"line_start":418,"line_end":418,"column_start":20,"column_end":37,"is_primary":true,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":20,"highlight_end":37}],"label":"expected 0 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs","byte_start":1556,"byte_end":1573,"line_start":40,"line_end":40,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"pub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 0 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:418:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut deps = mock_dependencies(&[]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 1 argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 0 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs:40:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":13245,"byte_end":13252,"line_start":440,"line_end":440,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), minter.clone(), mint_msg1)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:440:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m440\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), minter.clone(), mint_msg1)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":13611,"byte_end":13618,"line_start":453,"line_end":453,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), minter, mint_msg2)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:453:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m453\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), minter, mint_msg2)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `all_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `all_tokens` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":13741,"byte_end":13751,"line_start":457,"line_end":457,"column_start":27,"column_end":37,"is_primary":true,"text":[{"text":"    let tokens = contract.all_tokens(deps.as_ref(), None, Some(1)).unwrap();","highlight_start":27,"highlight_end":37}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `all_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:457:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    let tokens = contract.all_tokens(deps.as_ref(), None, Some(1)).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `all_tokens` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `all_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `all_tokens` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":13923,"byte_end":13933,"line_start":461,"line_end":461,"column_start":10,"column_end":20,"is_primary":true,"text":[{"text":"        .all_tokens(deps.as_ref(), Some(token_id1.clone()), Some(3))","highlight_start":10,"highlight_end":20}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `all_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:461:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .all_tokens(deps.as_ref(), Some(token_id1.clone()), Some(3))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `all_tokens` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":14363,"byte_end":14370,"line_start":473,"line_end":473,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), owner, approve_all_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:473:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m473\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), owner, approve_all_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":14875,"byte_end":14882,"line_start":490,"line_end":490,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), random.clone(), transfer_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:490:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m490\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), random.clone(), transfer_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":15422,"byte_end":15429,"line_start":507,"line_end":507,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), random, send_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:507:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m507\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), random, send_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":15801,"byte_end":15808,"line_start":518,"line_end":518,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), owner, approve_all_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:518:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m518\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), owner, approve_all_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `all_approvals` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `all_approvals` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":15912,"byte_end":15925,"line_start":522,"line_end":522,"column_start":10,"column_end":23,"is_primary":true,"text":[{"text":"        .all_approvals(","highlight_start":10,"highlight_end":23}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `all_approvals` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:522:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m522\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .all_approvals(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `all_approvals` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":16275,"byte_end":16295,"line_start":537,"line_end":537,"column_start":26,"column_end":46,"is_primary":true,"text":[{"text":"                expires: Expiration::Never {}","highlight_start":26,"highlight_end":46}],"label":"expected enum `cw721::Expiration`, found enum `cw0::Expiration`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cw0` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:537:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m537\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                expires: Expiration::Never {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `cw721::Expiration`, found enum `cw0::Expiration`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cw0` are being used?\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":16608,"byte_end":16615,"line_start":550,"line_end":550,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), owner.clone(), approve_all_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:550:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m550\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), owner.clone(), approve_all_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `all_approvals` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `all_approvals` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":16755,"byte_end":16768,"line_start":555,"line_end":555,"column_start":10,"column_end":23,"is_primary":true,"text":[{"text":"        .all_approvals(","highlight_start":10,"highlight_end":23}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `all_approvals` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:555:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m555\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .all_approvals(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `all_approvals` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":17117,"byte_end":17130,"line_start":569,"line_end":569,"column_start":26,"column_end":39,"is_primary":true,"text":[{"text":"                expires: buddy_expires,","highlight_start":26,"highlight_end":39}],"label":"expected enum `cw721::Expiration`, found enum `cw0::Expiration`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cw0` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:569:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m569\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                expires: buddy_expires,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `cw721::Expiration`, found enum `cw0::Expiration`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cw0` are being used?\u001b[0m\n\n"}
{"message":"the method `all_approvals` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `all_approvals` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":17196,"byte_end":17209,"line_start":574,"line_end":574,"column_start":10,"column_end":23,"is_primary":true,"text":[{"text":"        .all_approvals(","highlight_start":10,"highlight_end":23}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `all_approvals` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:574:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .all_approvals(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `all_approvals` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":17584,"byte_end":17604,"line_start":588,"line_end":588,"column_start":26,"column_end":46,"is_primary":true,"text":[{"text":"                expires: Expiration::Never {}","highlight_start":26,"highlight_end":46}],"label":"expected enum `cw721::Expiration`, found enum `cw0::Expiration`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cw0` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:588:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m588\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                expires: Expiration::Never {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `cw721::Expiration`, found enum `cw0::Expiration`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cw0` are being used?\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":17760,"byte_end":17767,"line_start":597,"line_end":597,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), owner, revoke_all_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:597:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m597\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), owner, revoke_all_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `all_approvals` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `all_approvals` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":17934,"byte_end":17947,"line_start":602,"line_end":602,"column_start":10,"column_end":23,"is_primary":true,"text":[{"text":"        .all_approvals(","highlight_start":10,"highlight_end":23}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `all_approvals` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:602:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m602\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .all_approvals(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `all_approvals` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":18294,"byte_end":18307,"line_start":616,"line_end":616,"column_start":26,"column_end":39,"is_primary":true,"text":[{"text":"                expires: buddy_expires,","highlight_start":26,"highlight_end":39}],"label":"expected enum `cw721::Expiration`, found enum `cw0::Expiration`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"perhaps two different versions of crate `cw0` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:616:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m616\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                expires: buddy_expires,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `cw721::Expiration`, found enum `cw0::Expiration`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cw0` are being used?\u001b[0m\n\n"}
{"message":"the method `all_approvals` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `all_approvals` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":18511,"byte_end":18524,"line_start":625,"line_end":625,"column_start":10,"column_end":23,"is_primary":true,"text":[{"text":"        .all_approvals(","highlight_start":10,"highlight_end":23}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `all_approvals` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:625:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m625\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .all_approvals(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `all_approvals` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"this function takes 0 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":18812,"byte_end":18815,"line_start":639,"line_end":639,"column_start":38,"column_end":41,"is_primary":false,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":38,"highlight_end":41}],"label":"supplied 1 argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":18794,"byte_end":18811,"line_start":639,"line_end":639,"column_start":20,"column_end":37,"is_primary":true,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":20,"highlight_end":37}],"label":"expected 0 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs","byte_start":1556,"byte_end":1573,"line_start":40,"line_end":40,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"pub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 0 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:639:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m639\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut deps = mock_dependencies(&[]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 1 argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 0 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs:40:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":19509,"byte_end":19516,"line_start":659,"line_end":659,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), minter.clone(), mint_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:659:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m659\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), minter.clone(), mint_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":19946,"byte_end":19953,"line_start":671,"line_end":671,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), minter.clone(), mint_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:671:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m671\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), minter.clone(), mint_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":20361,"byte_end":20368,"line_start":683,"line_end":683,"column_start":10,"column_end":17,"is_primary":true,"text":[{"text":"        .execute(deps.as_mut(), mock_env(), minter, mint_msg)","highlight_start":10,"highlight_end":17}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:683:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m683\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .execute(deps.as_mut(), mock_env(), minter, mint_msg)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `all_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `all_tokens` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":20574,"byte_end":20584,"line_start":688,"line_end":688,"column_start":27,"column_end":37,"is_primary":true,"text":[{"text":"    let tokens = contract.all_tokens(deps.as_ref(), None, None).unwrap();","highlight_start":27,"highlight_end":37}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `all_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:688:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m688\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    let tokens = contract.all_tokens(deps.as_ref(), None, None).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `all_tokens` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `all_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `all_tokens` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":20707,"byte_end":20717,"line_start":691,"line_end":691,"column_start":27,"column_end":37,"is_primary":true,"text":[{"text":"    let tokens = contract.all_tokens(deps.as_ref(), None, Some(2)).unwrap();","highlight_start":27,"highlight_end":37}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `all_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:691:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    let tokens = contract.all_tokens(deps.as_ref(), None, Some(2)).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `all_tokens` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `all_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `all_tokens` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":20845,"byte_end":20855,"line_start":694,"line_end":694,"column_start":10,"column_end":20,"is_primary":true,"text":[{"text":"        .all_tokens(deps.as_ref(), Some(expected[1].clone()), None)","highlight_start":10,"highlight_end":20}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `all_tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:694:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m694\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .all_tokens(deps.as_ref(), Some(expected[1].clone()), None)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `all_tokens` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `tokens` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":21143,"byte_end":21149,"line_start":703,"line_end":703,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"        .tokens(deps.as_ref(), demeter.clone(), None, None)","highlight_start":10,"highlight_end":16}],"label":"field, not a method","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the arguments","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":21149,"byte_end":21193,"line_start":703,"line_end":703,"column_start":16,"column_end":60,"is_primary":true,"text":[{"text":"        .tokens(deps.as_ref(), demeter.clone(), None, None)","highlight_start":16,"highlight_end":60}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:703:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m703\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .tokens(deps.as_ref(), demeter.clone(), None, None)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove the arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfield, not a method\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `tokens` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `tokens` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":21284,"byte_end":21290,"line_start":706,"line_end":706,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"    let tokens = contract.tokens(deps.as_ref(), ceres, None, None).unwrap();","highlight_start":27,"highlight_end":33}],"label":"field, not a method","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the arguments","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":21290,"byte_end":21324,"line_start":706,"line_end":706,"column_start":33,"column_end":67,"is_primary":true,"text":[{"text":"    let tokens = contract.tokens(deps.as_ref(), ceres, None, None).unwrap();","highlight_start":33,"highlight_end":67}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:706:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m706\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    let tokens = contract.tokens(deps.as_ref(), ceres, None, None).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove the arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfield, not a method\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `tokens` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `tokens` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":21442,"byte_end":21448,"line_start":711,"line_end":711,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"        .tokens(deps.as_ref(), demeter.clone(), None, Some(1))","highlight_start":10,"highlight_end":16}],"label":"field, not a method","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the arguments","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":21448,"byte_end":21495,"line_start":711,"line_end":711,"column_start":16,"column_end":63,"is_primary":true,"text":[{"text":"        .tokens(deps.as_ref(), demeter.clone(), None, Some(1))","highlight_start":16,"highlight_end":63}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:711:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m711\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .tokens(deps.as_ref(), demeter.clone(), None, Some(1))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove the arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfield, not a method\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `tokens` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `tokens` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":21604,"byte_end":21610,"line_start":715,"line_end":715,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"        .tokens(deps.as_ref(), demeter, Some(by_demeter[0].clone()), Some(3))","highlight_start":10,"highlight_end":16}],"label":"field, not a method","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"doesn't satisfy `_: Cw721Query<tns::registrar::Extension>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[{"file_name":"contracts/registrar/src/query.rs","byte_start":811,"byte_end":824,"line_start":22,"line_end":22,"column_start":16,"column_end":29,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":16,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/query.rs","byte_start":829,"byte_end":852,"line_start":22,"line_end":22,"column_start":34,"column_end":57,"is_primary":true,"text":[{"text":"impl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>","highlight_start":34,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the arguments","code":null,"level":"help","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":21610,"byte_end":21672,"line_start":715,"line_end":715,"column_start":16,"column_end":78,"is_primary":true,"text":[{"text":"        .tokens(deps.as_ref(), demeter, Some(by_demeter[0].clone()), Some(3))","highlight_start":16,"highlight_end":78}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `tokens` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:715:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m715\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .tokens(deps.as_ref(), demeter, Some(by_demeter[0].clone()), Some(3))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove the arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfield, not a method\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `tokens` not found for this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Cw721Query<tns::registrar::Extension>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied because of the requirements of the implementation of `Cw721Query<_>` for `_`:\u001b[0m\n\u001b[0m      `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/query.rs:22:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a, T, C> Cw721Query<T> for Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"this function takes 0 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":22102,"byte_end":22105,"line_start":731,"line_end":731,"column_start":38,"column_end":41,"is_primary":false,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":38,"highlight_end":41}],"label":"supplied 1 argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":22084,"byte_end":22101,"line_start":731,"line_end":731,"column_start":20,"column_end":37,"is_primary":true,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":20,"highlight_end":37}],"label":"expected 0 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs","byte_start":1556,"byte_end":1573,"line_start":40,"line_end":40,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"pub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 0 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:731:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m731\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut deps = mock_dependencies(&[]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 1 argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 0 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs:40:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"this function takes 0 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":22898,"byte_end":22901,"line_start":756,"line_end":756,"column_start":38,"column_end":41,"is_primary":false,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":38,"highlight_end":41}],"label":"supplied 1 argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":22880,"byte_end":22897,"line_start":756,"line_end":756,"column_start":20,"column_end":37,"is_primary":true,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":20,"highlight_end":37}],"label":"expected 0 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs","byte_start":1556,"byte_end":1573,"line_start":40,"line_end":40,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"pub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 0 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:756:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m756\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut deps = mock_dependencies(&[]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 1 argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 0 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs:40:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"no field `name` on type `cw721::NftInfoResponse<tns::registrar::Extension>`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":24722,"byte_end":24726,"line_start":811,"line_end":811,"column_start":34,"column_end":38,"is_primary":true,"text":[{"text":"    assert_eq!(nft_info_response.name, \"alice.ust\");","highlight_start":34,"highlight_end":38}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `token_uri`, `extension`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `name` on type `cw721::NftInfoResponse<tns::registrar::Extension>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:811:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m811\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert_eq!(nft_info_response.name, \"alice.ust\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `token_uri`, `extension`\u001b[0m\n\n"}
{"message":"this function takes 0 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":25704,"byte_end":25707,"line_start":840,"line_end":840,"column_start":38,"column_end":41,"is_primary":false,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":38,"highlight_end":41}],"label":"supplied 1 argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":25686,"byte_end":25703,"line_start":840,"line_end":840,"column_start":20,"column_end":37,"is_primary":true,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":20,"highlight_end":37}],"label":"expected 0 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs","byte_start":1556,"byte_end":1573,"line_start":40,"line_end":40,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"pub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 0 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:840:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m840\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut deps = mock_dependencies(&[]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 1 argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 0 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs:40:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"this function takes 0 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":30038,"byte_end":30041,"line_start":974,"line_end":974,"column_start":38,"column_end":41,"is_primary":false,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":38,"highlight_end":41}],"label":"supplied 1 argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/test.rs","byte_start":30020,"byte_end":30037,"line_start":974,"line_end":974,"column_start":20,"column_end":37,"is_primary":true,"text":[{"text":"    let mut deps = mock_dependencies(&[]);","highlight_start":20,"highlight_end":37}],"label":"expected 0 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs","byte_start":1556,"byte_end":1573,"line_start":40,"line_end":40,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"pub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 0 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:974:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m974\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut deps = mock_dependencies(&[]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 1 argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 0 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/mock.rs:40:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn mock_dependencies() -> OwnedDeps<MockStorage, MockApi, MockQuerier, Empty> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the method `instantiate` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `instantiate` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/lib.rs","byte_start":848,"byte_end":859,"line_start":31,"line_end":31,"column_start":15,"column_end":26,"is_primary":true,"text":[{"text":"        tract.instantiate(deps, env, info, msg)","highlight_start":15,"highlight_end":26}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `instantiate` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/lib.rs:31:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        tract.instantiate(deps, env, info, msg)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `instantiate` not found for this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `execute` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/lib.rs","byte_start":1155,"byte_end":1162,"line_start":42,"line_end":42,"column_start":15,"column_end":22,"is_primary":true,"text":[{"text":"        tract.execute(deps, env, info, msg)","highlight_start":15,"highlight_end":22}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `execute` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/lib.rs:42:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        tract.execute(deps, env, info, msg)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `execute` not found for this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"the method `query` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/registrar/src/state.rs","byte_start":351,"byte_end":841,"line_start":10,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub struct Cw721Contract<'a, T, C>","highlight_start":1,"highlight_end":35},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: Serialize + DeserializeOwned + Clone,","highlight_start":1,"highlight_end":45},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    pub contract_info: Item<'a, ContractInfoResponse>,","highlight_start":1,"highlight_end":55},{"text":"    pub minter: Item<'a, Addr>,","highlight_start":1,"highlight_end":32},{"text":"    pub token_count: Item<'a, u64>,","highlight_start":1,"highlight_end":36},{"text":"    /// Stored as (granter, operator) giving operator full control over granter's account","highlight_start":1,"highlight_end":90},{"text":"    pub operators: Map<'a, (&'a Addr, &'a Addr), Expiration>,","highlight_start":1,"highlight_end":62},{"text":"    pub tokens: IndexedMap<'a, &'a str, TokenInfo<T>, TokenIndexes<'a, T>>,","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub(crate) _custom_response: PhantomData<C>,","highlight_start":1,"highlight_end":49},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"method `query` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/registrar/src/lib.rs","byte_start":1368,"byte_end":1373,"line_start":48,"line_end":48,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"        tract.query(deps, env, msg)","highlight_start":15,"highlight_end":20}],"label":"method cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs","byte_start":523,"byte_end":539,"line_start":11,"line_end":11,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct Empty {}","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`cosmwasm_std::Empty: cw721::CustomMsg`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `query` exists for struct `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/lib.rs:48:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        tract.query(deps, env, msg)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `state::Cw721Contract<'_, tns::registrar::Extension, cosmwasm_std::Empty>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/prompt/.cargo/registry/src/github.com-1ecc6299db9ec823/cosmwasm-std-1.0.0/src/results/empty.rs:11:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Empty {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/registrar/src/state.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cw721Contract<'a, T, C>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Serialize + DeserializeOwned + Clone,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) _custom_response: PhantomData<C>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `query` not found for this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `cosmwasm_std::Empty: cw721::CustomMsg`\u001b[0m\n\n"}
{"message":"unused import: `Cw721Query`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"contracts/registrar/src/test.rs","byte_start":382,"byte_end":392,"line_start":12,"line_end":12,"column_start":61,"column_end":71,"is_primary":true,"text":[{"text":"    Approval, ApprovedForAllResponse, ContractInfoResponse, Cw721Query, Cw721ReceiveMsg,","highlight_start":61,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Cw721Query`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/registrar/src/test.rs:12:61\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Approval, ApprovedForAllResponse, ContractInfoResponse, Cw721Query, Cw721ReceiveMsg,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"aborting due to 156 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 156 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0053, E0061, E0277, E0308, E0432, E0560, E0599, E0609.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0053, E0061, E0277, E0308, E0432, E0560, E0599, E0609.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0053`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0053`.\u001b[0m\n"}
